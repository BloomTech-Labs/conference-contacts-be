// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  conference: (where?: ConferenceWhereInput) => Promise<boolean>;
  connection: (where?: ConnectionWhereInput) => Promise<boolean>;
  coordinate: (where?: CoordinateWhereInput) => Promise<boolean>;
  manualContact: (where?: ManualContactWhereInput) => Promise<boolean>;
  profileField: (where?: ProfileFieldWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  conference: (where: ConferenceWhereUniqueInput) => ConferenceNullablePromise;
  conferences: (args?: {
    where?: ConferenceWhereInput;
    orderBy?: ConferenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Conference>;
  conferencesConnection: (args?: {
    where?: ConferenceWhereInput;
    orderBy?: ConferenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ConferenceConnectionPromise;
  connection: (where: ConnectionWhereUniqueInput) => ConnectionNullablePromise;
  connections: (args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Connection>;
  connectionsConnection: (args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ConnectionConnectionPromise;
  coordinate: (where: CoordinateWhereUniqueInput) => CoordinateNullablePromise;
  coordinates: (args?: {
    where?: CoordinateWhereInput;
    orderBy?: CoordinateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Coordinate>;
  coordinatesConnection: (args?: {
    where?: CoordinateWhereInput;
    orderBy?: CoordinateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CoordinateConnectionPromise;
  manualContact: (
    where: ManualContactWhereUniqueInput
  ) => ManualContactNullablePromise;
  manualContacts: (args?: {
    where?: ManualContactWhereInput;
    orderBy?: ManualContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ManualContact>;
  manualContactsConnection: (args?: {
    where?: ManualContactWhereInput;
    orderBy?: ManualContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ManualContactConnectionPromise;
  profileField: (
    where: ProfileFieldWhereUniqueInput
  ) => ProfileFieldNullablePromise;
  profileFields: (args?: {
    where?: ProfileFieldWhereInput;
    orderBy?: ProfileFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProfileField>;
  profileFieldsConnection: (args?: {
    where?: ProfileFieldWhereInput;
    orderBy?: ProfileFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProfileFieldConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createConference: (data: ConferenceCreateInput) => ConferencePromise;
  updateConference: (args: {
    data: ConferenceUpdateInput;
    where: ConferenceWhereUniqueInput;
  }) => ConferencePromise;
  updateManyConferences: (args: {
    data: ConferenceUpdateManyMutationInput;
    where?: ConferenceWhereInput;
  }) => BatchPayloadPromise;
  upsertConference: (args: {
    where: ConferenceWhereUniqueInput;
    create: ConferenceCreateInput;
    update: ConferenceUpdateInput;
  }) => ConferencePromise;
  deleteConference: (where: ConferenceWhereUniqueInput) => ConferencePromise;
  deleteManyConferences: (where?: ConferenceWhereInput) => BatchPayloadPromise;
  createConnection: (data: ConnectionCreateInput) => ConnectionPromise;
  updateConnection: (args: {
    data: ConnectionUpdateInput;
    where: ConnectionWhereUniqueInput;
  }) => ConnectionPromise;
  updateManyConnections: (args: {
    data: ConnectionUpdateManyMutationInput;
    where?: ConnectionWhereInput;
  }) => BatchPayloadPromise;
  upsertConnection: (args: {
    where: ConnectionWhereUniqueInput;
    create: ConnectionCreateInput;
    update: ConnectionUpdateInput;
  }) => ConnectionPromise;
  deleteConnection: (where: ConnectionWhereUniqueInput) => ConnectionPromise;
  deleteManyConnections: (where?: ConnectionWhereInput) => BatchPayloadPromise;
  createCoordinate: (data: CoordinateCreateInput) => CoordinatePromise;
  updateCoordinate: (args: {
    data: CoordinateUpdateInput;
    where: CoordinateWhereUniqueInput;
  }) => CoordinatePromise;
  updateManyCoordinates: (args: {
    data: CoordinateUpdateManyMutationInput;
    where?: CoordinateWhereInput;
  }) => BatchPayloadPromise;
  upsertCoordinate: (args: {
    where: CoordinateWhereUniqueInput;
    create: CoordinateCreateInput;
    update: CoordinateUpdateInput;
  }) => CoordinatePromise;
  deleteCoordinate: (where: CoordinateWhereUniqueInput) => CoordinatePromise;
  deleteManyCoordinates: (where?: CoordinateWhereInput) => BatchPayloadPromise;
  createManualContact: (data: ManualContactCreateInput) => ManualContactPromise;
  updateManualContact: (args: {
    data: ManualContactUpdateInput;
    where: ManualContactWhereUniqueInput;
  }) => ManualContactPromise;
  updateManyManualContacts: (args: {
    data: ManualContactUpdateManyMutationInput;
    where?: ManualContactWhereInput;
  }) => BatchPayloadPromise;
  upsertManualContact: (args: {
    where: ManualContactWhereUniqueInput;
    create: ManualContactCreateInput;
    update: ManualContactUpdateInput;
  }) => ManualContactPromise;
  deleteManualContact: (
    where: ManualContactWhereUniqueInput
  ) => ManualContactPromise;
  deleteManyManualContacts: (
    where?: ManualContactWhereInput
  ) => BatchPayloadPromise;
  createProfileField: (data: ProfileFieldCreateInput) => ProfileFieldPromise;
  updateProfileField: (args: {
    data: ProfileFieldUpdateInput;
    where: ProfileFieldWhereUniqueInput;
  }) => ProfileFieldPromise;
  updateManyProfileFields: (args: {
    data: ProfileFieldUpdateManyMutationInput;
    where?: ProfileFieldWhereInput;
  }) => BatchPayloadPromise;
  upsertProfileField: (args: {
    where: ProfileFieldWhereUniqueInput;
    create: ProfileFieldCreateInput;
    update: ProfileFieldUpdateInput;
  }) => ProfileFieldPromise;
  deleteProfileField: (
    where: ProfileFieldWhereUniqueInput
  ) => ProfileFieldPromise;
  deleteManyProfileFields: (
    where?: ProfileFieldWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  conference: (
    where?: ConferenceSubscriptionWhereInput
  ) => ConferenceSubscriptionPayloadSubscription;
  connection: (
    where?: ConnectionSubscriptionWhereInput
  ) => ConnectionSubscriptionPayloadSubscription;
  coordinate: (
    where?: CoordinateSubscriptionWhereInput
  ) => CoordinateSubscriptionPayloadSubscription;
  manualContact: (
    where?: ManualContactSubscriptionWhereInput
  ) => ManualContactSubscriptionPayloadSubscription;
  profileField: (
    where?: ProfileFieldSubscriptionWhereInput
  ) => ProfileFieldSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ManualContactOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type Privacy = "PUBLIC" | "PRIVATE" | "CONNECTED";

export type Info =
  | "EMAIL"
  | "PHONE"
  | "SOCIAL"
  | "AGE"
  | "GENDER"
  | "INDUSTRY"
  | "JOBTITLE"
  | "BIO";

export type ConnectionStatus = "PENDING" | "CONNECTED" | "BLOCKED";

export type UserOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type ProfileFieldOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "type_ASC"
  | "type_DESC"
  | "privacy_ASC"
  | "privacy_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ConnectionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC";

export type ConferenceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "start_date_ASC"
  | "start_date_DESC"
  | "end_date_ASC"
  | "end_date_DESC";

export type CoordinateOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC";

export interface ProfileFieldUpdateWithWhereUniqueWithoutUserInput {
  where: ProfileFieldWhereUniqueInput;
  data: ProfileFieldUpdateWithoutUserDataInput;
}

export type ConferenceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ManualContactScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<ManualContactScalarWhereInput[] | ManualContactScalarWhereInput>;
  OR?: Maybe<ManualContactScalarWhereInput[] | ManualContactScalarWhereInput>;
  NOT?: Maybe<ManualContactScalarWhereInput[] | ManualContactScalarWhereInput>;
}

export interface ConnectionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sender?: Maybe<UserWhereInput>;
  recipient?: Maybe<UserWhereInput>;
  status?: Maybe<ConnectionStatus>;
  status_not?: Maybe<ConnectionStatus>;
  status_in?: Maybe<ConnectionStatus[] | ConnectionStatus>;
  status_not_in?: Maybe<ConnectionStatus[] | ConnectionStatus>;
  AND?: Maybe<ConnectionWhereInput[] | ConnectionWhereInput>;
  OR?: Maybe<ConnectionWhereInput[] | ConnectionWhereInput>;
  NOT?: Maybe<ConnectionWhereInput[] | ConnectionWhereInput>;
}

export interface ManualContactUpdateManyWithWhereNestedInput {
  where: ManualContactScalarWhereInput;
  data: ManualContactUpdateManyDataInput;
}

export interface ConferenceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  start_date?: Maybe<DateTimeInput>;
  start_date_not?: Maybe<DateTimeInput>;
  start_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_date_lt?: Maybe<DateTimeInput>;
  start_date_lte?: Maybe<DateTimeInput>;
  start_date_gt?: Maybe<DateTimeInput>;
  start_date_gte?: Maybe<DateTimeInput>;
  end_date?: Maybe<DateTimeInput>;
  end_date_not?: Maybe<DateTimeInput>;
  end_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_date_lt?: Maybe<DateTimeInput>;
  end_date_lte?: Maybe<DateTimeInput>;
  end_date_gt?: Maybe<DateTimeInput>;
  end_date_gte?: Maybe<DateTimeInput>;
  location?: Maybe<CoordinateWhereInput>;
  attendees_every?: Maybe<UserWhereInput>;
  attendees_some?: Maybe<UserWhereInput>;
  attendees_none?: Maybe<UserWhereInput>;
  AND?: Maybe<ConferenceWhereInput[] | ConferenceWhereInput>;
  OR?: Maybe<ConferenceWhereInput[] | ConferenceWhereInput>;
  NOT?: Maybe<ConferenceWhereInput[] | ConferenceWhereInput>;
}

export interface ManualContactUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface ProfileFieldWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  manualContacts_every?: Maybe<ManualContactWhereInput>;
  manualContacts_some?: Maybe<ManualContactWhereInput>;
  manualContacts_none?: Maybe<ManualContactWhereInput>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  type?: Maybe<Info>;
  type_not?: Maybe<Info>;
  type_in?: Maybe<Info[] | Info>;
  type_not_in?: Maybe<Info[] | Info>;
  privacy?: Maybe<Privacy>;
  privacy_not?: Maybe<Privacy>;
  privacy_in?: Maybe<Privacy[] | Privacy>;
  privacy_not_in?: Maybe<Privacy[] | Privacy>;
  AND?: Maybe<ProfileFieldWhereInput[] | ProfileFieldWhereInput>;
  OR?: Maybe<ProfileFieldWhereInput[] | ProfileFieldWhereInput>;
  NOT?: Maybe<ProfileFieldWhereInput[] | ProfileFieldWhereInput>;
}

export interface UserCreateOneWithoutSent_requestsInput {
  create?: Maybe<UserCreateWithoutSent_requestsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ConnectionUpdateManyDataInput {
  status?: Maybe<ConnectionStatus>;
}

export interface UserCreateWithoutSent_requestsInput {
  id?: Maybe<ID_Input>;
  name: String;
  profile?: Maybe<ProfileFieldCreateManyWithoutUserInput>;
  received_requests?: Maybe<ConnectionCreateManyWithoutRecipientInput>;
  manualContacts?: Maybe<ManualContactCreateManyInput>;
  conferences?: Maybe<ConferenceCreateManyWithoutAttendeesInput>;
}

export interface ProfileFieldUpsertWithWhereUniqueWithoutUserInput {
  where: ProfileFieldWhereUniqueInput;
  update: ProfileFieldUpdateWithoutUserDataInput;
  create: ProfileFieldCreateWithoutUserInput;
}

export interface ConferenceCreateManyWithoutAttendeesInput {
  create?: Maybe<
    | ConferenceCreateWithoutAttendeesInput[]
    | ConferenceCreateWithoutAttendeesInput
  >;
  connect?: Maybe<ConferenceWhereUniqueInput[] | ConferenceWhereUniqueInput>;
}

export interface ProfileFieldSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProfileFieldWhereInput>;
  AND?: Maybe<
    ProfileFieldSubscriptionWhereInput[] | ProfileFieldSubscriptionWhereInput
  >;
  OR?: Maybe<
    ProfileFieldSubscriptionWhereInput[] | ProfileFieldSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ProfileFieldSubscriptionWhereInput[] | ProfileFieldSubscriptionWhereInput
  >;
}

export interface ConferenceCreateWithoutAttendeesInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  start_date: DateTimeInput;
  end_date: DateTimeInput;
  location?: Maybe<CoordinateCreateOneInput>;
}

export interface CoordinateSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CoordinateWhereInput>;
  AND?: Maybe<
    CoordinateSubscriptionWhereInput[] | CoordinateSubscriptionWhereInput
  >;
  OR?: Maybe<
    CoordinateSubscriptionWhereInput[] | CoordinateSubscriptionWhereInput
  >;
  NOT?: Maybe<
    CoordinateSubscriptionWhereInput[] | CoordinateSubscriptionWhereInput
  >;
}

export interface ConferenceUpdateInput {
  title?: Maybe<String>;
  start_date?: Maybe<DateTimeInput>;
  end_date?: Maybe<DateTimeInput>;
  location?: Maybe<CoordinateUpdateOneInput>;
  attendees?: Maybe<UserUpdateManyWithoutConferencesInput>;
}

export interface ConferenceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ConferenceWhereInput>;
  AND?: Maybe<
    ConferenceSubscriptionWhereInput[] | ConferenceSubscriptionWhereInput
  >;
  OR?: Maybe<
    ConferenceSubscriptionWhereInput[] | ConferenceSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ConferenceSubscriptionWhereInput[] | ConferenceSubscriptionWhereInput
  >;
}

export interface CoordinateUpdateOneInput {
  create?: Maybe<CoordinateCreateInput>;
  update?: Maybe<CoordinateUpdateDataInput>;
  upsert?: Maybe<CoordinateUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CoordinateWhereUniqueInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  profile?: Maybe<ProfileFieldUpdateManyWithoutUserInput>;
  sent_requests?: Maybe<ConnectionUpdateManyWithoutSenderInput>;
  received_requests?: Maybe<ConnectionUpdateManyWithoutRecipientInput>;
  manualContacts?: Maybe<ManualContactUpdateManyInput>;
  conferences?: Maybe<ConferenceUpdateManyWithoutAttendeesInput>;
}

export interface CoordinateUpdateDataInput {
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
}

export interface ProfileFieldUpdateManyMutationInput {
  value?: Maybe<String>;
  type?: Maybe<Info>;
  privacy?: Maybe<Privacy>;
}

export interface CoordinateUpsertNestedInput {
  update: CoordinateUpdateDataInput;
  create: CoordinateCreateInput;
}

export type ConnectionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateManyWithoutConferencesInput {
  create?: Maybe<
    UserCreateWithoutConferencesInput[] | UserCreateWithoutConferencesInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutConferencesInput[]
    | UserUpdateWithWhereUniqueWithoutConferencesInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutConferencesInput[]
    | UserUpsertWithWhereUniqueWithoutConferencesInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface ManualContactUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserUpdateWithWhereUniqueWithoutConferencesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutConferencesDataInput;
}

export type CoordinateWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateWithoutConferencesDataInput {
  name?: Maybe<String>;
  profile?: Maybe<ProfileFieldUpdateManyWithoutUserInput>;
  sent_requests?: Maybe<ConnectionUpdateManyWithoutSenderInput>;
  received_requests?: Maybe<ConnectionUpdateManyWithoutRecipientInput>;
  manualContacts?: Maybe<ManualContactUpdateManyInput>;
}

export interface CoordinateUpdateInput {
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
}

export interface ProfileFieldUpdateManyWithoutUserInput {
  create?: Maybe<
    ProfileFieldCreateWithoutUserInput[] | ProfileFieldCreateWithoutUserInput
  >;
  delete?: Maybe<ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput>;
  connect?: Maybe<
    ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput
  >;
  set?: Maybe<ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput>;
  disconnect?: Maybe<
    ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput
  >;
  update?: Maybe<
    | ProfileFieldUpdateWithWhereUniqueWithoutUserInput[]
    | ProfileFieldUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ProfileFieldUpsertWithWhereUniqueWithoutUserInput[]
    | ProfileFieldUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    ProfileFieldScalarWhereInput[] | ProfileFieldScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProfileFieldUpdateManyWithWhereNestedInput[]
    | ProfileFieldUpdateManyWithWhereNestedInput
  >;
}

export interface ConnectionUpdateInput {
  sender?: Maybe<UserUpdateOneWithoutSent_requestsInput>;
  recipient?: Maybe<UserUpdateOneWithoutReceived_requestsInput>;
  status?: Maybe<ConnectionStatus>;
}

export interface ProfileFieldUpsertWithWhereUniqueWithoutManualContactsInput {
  where: ProfileFieldWhereUniqueInput;
  update: ProfileFieldUpdateWithoutManualContactsDataInput;
  create: ProfileFieldCreateWithoutManualContactsInput;
}

export interface ConnectionCreateInput {
  id?: Maybe<ID_Input>;
  sender?: Maybe<UserCreateOneWithoutSent_requestsInput>;
  recipient?: Maybe<UserCreateOneWithoutReceived_requestsInput>;
  status?: Maybe<ConnectionStatus>;
}

export interface ProfileFieldUpdateWithoutUserDataInput {
  manualContacts?: Maybe<ManualContactUpdateManyWithoutProfileInput>;
  value?: Maybe<String>;
  type?: Maybe<Info>;
  privacy?: Maybe<Privacy>;
}

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface ManualContactUpdateManyWithoutProfileInput {
  create?: Maybe<
    | ManualContactCreateWithoutProfileInput[]
    | ManualContactCreateWithoutProfileInput
  >;
  delete?: Maybe<
    ManualContactWhereUniqueInput[] | ManualContactWhereUniqueInput
  >;
  connect?: Maybe<
    ManualContactWhereUniqueInput[] | ManualContactWhereUniqueInput
  >;
  set?: Maybe<ManualContactWhereUniqueInput[] | ManualContactWhereUniqueInput>;
  disconnect?: Maybe<
    ManualContactWhereUniqueInput[] | ManualContactWhereUniqueInput
  >;
  update?: Maybe<
    | ManualContactUpdateWithWhereUniqueWithoutProfileInput[]
    | ManualContactUpdateWithWhereUniqueWithoutProfileInput
  >;
  upsert?: Maybe<
    | ManualContactUpsertWithWhereUniqueWithoutProfileInput[]
    | ManualContactUpsertWithWhereUniqueWithoutProfileInput
  >;
  deleteMany?: Maybe<
    ManualContactScalarWhereInput[] | ManualContactScalarWhereInput
  >;
  updateMany?: Maybe<
    | ManualContactUpdateManyWithWhereNestedInput[]
    | ManualContactUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface ManualContactUpdateWithWhereUniqueWithoutProfileInput {
  where: ManualContactWhereUniqueInput;
  data: ManualContactUpdateWithoutProfileDataInput;
}

export interface UserUpsertWithWhereUniqueWithoutConferencesInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutConferencesDataInput;
  create: UserCreateWithoutConferencesInput;
}

export interface ManualContactUpdateWithoutProfileDataInput {
  name?: Maybe<String>;
}

export interface ConnectionUpsertWithWhereUniqueWithoutSenderInput {
  where: ConnectionWhereUniqueInput;
  update: ConnectionUpdateWithoutSenderDataInput;
  create: ConnectionCreateWithoutSenderInput;
}

export interface ManualContactUpsertWithWhereUniqueWithoutProfileInput {
  where: ManualContactWhereUniqueInput;
  update: ManualContactUpdateWithoutProfileDataInput;
  create: ManualContactCreateWithoutProfileInput;
}

export interface ManualContactUpsertWithWhereUniqueNestedInput {
  where: ManualContactWhereUniqueInput;
  update: ManualContactUpdateDataInput;
  create: ManualContactCreateInput;
}

export interface ManualContactWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  profile_every?: Maybe<ProfileFieldWhereInput>;
  profile_some?: Maybe<ProfileFieldWhereInput>;
  profile_none?: Maybe<ProfileFieldWhereInput>;
  AND?: Maybe<ManualContactWhereInput[] | ManualContactWhereInput>;
  OR?: Maybe<ManualContactWhereInput[] | ManualContactWhereInput>;
  NOT?: Maybe<ManualContactWhereInput[] | ManualContactWhereInput>;
}

export interface ConferenceCreateInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  start_date: DateTimeInput;
  end_date: DateTimeInput;
  location?: Maybe<CoordinateCreateOneInput>;
  attendees?: Maybe<UserCreateManyWithoutConferencesInput>;
}

export interface CoordinateWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  latitude?: Maybe<Float>;
  latitude_not?: Maybe<Float>;
  latitude_in?: Maybe<Float[] | Float>;
  latitude_not_in?: Maybe<Float[] | Float>;
  latitude_lt?: Maybe<Float>;
  latitude_lte?: Maybe<Float>;
  latitude_gt?: Maybe<Float>;
  latitude_gte?: Maybe<Float>;
  longitude?: Maybe<Float>;
  longitude_not?: Maybe<Float>;
  longitude_in?: Maybe<Float[] | Float>;
  longitude_not_in?: Maybe<Float[] | Float>;
  longitude_lt?: Maybe<Float>;
  longitude_lte?: Maybe<Float>;
  longitude_gt?: Maybe<Float>;
  longitude_gte?: Maybe<Float>;
  AND?: Maybe<CoordinateWhereInput[] | CoordinateWhereInput>;
  OR?: Maybe<CoordinateWhereInput[] | CoordinateWhereInput>;
  NOT?: Maybe<CoordinateWhereInput[] | CoordinateWhereInput>;
}

export interface CoordinateCreateInput {
  id?: Maybe<ID_Input>;
  latitude: Float;
  longitude: Float;
}

export interface UserUpsertWithoutProfileInput {
  update: UserUpdateWithoutProfileDataInput;
  create: UserCreateWithoutProfileInput;
}

export interface UserCreateWithoutConferencesInput {
  id?: Maybe<ID_Input>;
  name: String;
  profile?: Maybe<ProfileFieldCreateManyWithoutUserInput>;
  sent_requests?: Maybe<ConnectionCreateManyWithoutSenderInput>;
  received_requests?: Maybe<ConnectionCreateManyWithoutRecipientInput>;
  manualContacts?: Maybe<ManualContactCreateManyInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  profile_every?: Maybe<ProfileFieldWhereInput>;
  profile_some?: Maybe<ProfileFieldWhereInput>;
  profile_none?: Maybe<ProfileFieldWhereInput>;
  sent_requests_every?: Maybe<ConnectionWhereInput>;
  sent_requests_some?: Maybe<ConnectionWhereInput>;
  sent_requests_none?: Maybe<ConnectionWhereInput>;
  received_requests_every?: Maybe<ConnectionWhereInput>;
  received_requests_some?: Maybe<ConnectionWhereInput>;
  received_requests_none?: Maybe<ConnectionWhereInput>;
  manualContacts_every?: Maybe<ManualContactWhereInput>;
  manualContacts_some?: Maybe<ManualContactWhereInput>;
  manualContacts_none?: Maybe<ManualContactWhereInput>;
  conferences_every?: Maybe<ConferenceWhereInput>;
  conferences_some?: Maybe<ConferenceWhereInput>;
  conferences_none?: Maybe<ConferenceWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ProfileFieldCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  manualContacts?: Maybe<ManualContactCreateManyWithoutProfileInput>;
  value?: Maybe<String>;
  type?: Maybe<Info>;
  privacy?: Maybe<Privacy>;
}

export interface ProfileFieldScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  type?: Maybe<Info>;
  type_not?: Maybe<Info>;
  type_in?: Maybe<Info[] | Info>;
  type_not_in?: Maybe<Info[] | Info>;
  privacy?: Maybe<Privacy>;
  privacy_not?: Maybe<Privacy>;
  privacy_in?: Maybe<Privacy[] | Privacy>;
  privacy_not_in?: Maybe<Privacy[] | Privacy>;
  AND?: Maybe<ProfileFieldScalarWhereInput[] | ProfileFieldScalarWhereInput>;
  OR?: Maybe<ProfileFieldScalarWhereInput[] | ProfileFieldScalarWhereInput>;
  NOT?: Maybe<ProfileFieldScalarWhereInput[] | ProfileFieldScalarWhereInput>;
}

export interface ManualContactCreateWithoutProfileInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
}

export interface ProfileFieldUpdateManyWithWhereNestedInput {
  where: ProfileFieldScalarWhereInput;
  data: ProfileFieldUpdateManyDataInput;
}

export interface ConnectionCreateWithoutSenderInput {
  id?: Maybe<ID_Input>;
  recipient?: Maybe<UserCreateOneWithoutReceived_requestsInput>;
  status?: Maybe<ConnectionStatus>;
}

export interface ProfileFieldUpdateManyDataInput {
  value?: Maybe<String>;
  type?: Maybe<Info>;
  privacy?: Maybe<Privacy>;
}

export interface UserCreateWithoutReceived_requestsInput {
  id?: Maybe<ID_Input>;
  name: String;
  profile?: Maybe<ProfileFieldCreateManyWithoutUserInput>;
  sent_requests?: Maybe<ConnectionCreateManyWithoutSenderInput>;
  manualContacts?: Maybe<ManualContactCreateManyInput>;
  conferences?: Maybe<ConferenceCreateManyWithoutAttendeesInput>;
}

export interface ConnectionUpdateManyWithoutSenderInput {
  create?: Maybe<
    ConnectionCreateWithoutSenderInput[] | ConnectionCreateWithoutSenderInput
  >;
  delete?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  connect?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  set?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  disconnect?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  update?: Maybe<
    | ConnectionUpdateWithWhereUniqueWithoutSenderInput[]
    | ConnectionUpdateWithWhereUniqueWithoutSenderInput
  >;
  upsert?: Maybe<
    | ConnectionUpsertWithWhereUniqueWithoutSenderInput[]
    | ConnectionUpsertWithWhereUniqueWithoutSenderInput
  >;
  deleteMany?: Maybe<ConnectionScalarWhereInput[] | ConnectionScalarWhereInput>;
  updateMany?: Maybe<
    | ConnectionUpdateManyWithWhereNestedInput[]
    | ConnectionUpdateManyWithWhereNestedInput
  >;
}

export interface ManualContactCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  profile?: Maybe<ProfileFieldCreateManyWithoutManualContactsInput>;
}

export interface ConnectionUpdateWithWhereUniqueWithoutSenderInput {
  where: ConnectionWhereUniqueInput;
  data: ConnectionUpdateWithoutSenderDataInput;
}

export interface ProfileFieldCreateWithoutManualContactsInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutProfileInput>;
  value?: Maybe<String>;
  type?: Maybe<Info>;
  privacy?: Maybe<Privacy>;
}

export interface ConnectionUpdateWithoutSenderDataInput {
  recipient?: Maybe<UserUpdateOneWithoutReceived_requestsInput>;
  status?: Maybe<ConnectionStatus>;
}

export interface UserCreateWithoutProfileInput {
  id?: Maybe<ID_Input>;
  name: String;
  sent_requests?: Maybe<ConnectionCreateManyWithoutSenderInput>;
  received_requests?: Maybe<ConnectionCreateManyWithoutRecipientInput>;
  manualContacts?: Maybe<ManualContactCreateManyInput>;
  conferences?: Maybe<ConferenceCreateManyWithoutAttendeesInput>;
}

export interface UserUpdateOneWithoutReceived_requestsInput {
  create?: Maybe<UserCreateWithoutReceived_requestsInput>;
  update?: Maybe<UserUpdateWithoutReceived_requestsDataInput>;
  upsert?: Maybe<UserUpsertWithoutReceived_requestsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ConnectionCreateWithoutRecipientInput {
  id?: Maybe<ID_Input>;
  sender?: Maybe<UserCreateOneWithoutSent_requestsInput>;
  status?: Maybe<ConnectionStatus>;
}

export interface UserUpdateWithoutReceived_requestsDataInput {
  name?: Maybe<String>;
  profile?: Maybe<ProfileFieldUpdateManyWithoutUserInput>;
  sent_requests?: Maybe<ConnectionUpdateManyWithoutSenderInput>;
  manualContacts?: Maybe<ManualContactUpdateManyInput>;
  conferences?: Maybe<ConferenceUpdateManyWithoutAttendeesInput>;
}

export interface ManualContactSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ManualContactWhereInput>;
  AND?: Maybe<
    ManualContactSubscriptionWhereInput[] | ManualContactSubscriptionWhereInput
  >;
  OR?: Maybe<
    ManualContactSubscriptionWhereInput[] | ManualContactSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ManualContactSubscriptionWhereInput[] | ManualContactSubscriptionWhereInput
  >;
}

export interface ManualContactUpdateManyInput {
  create?: Maybe<ManualContactCreateInput[] | ManualContactCreateInput>;
  update?: Maybe<
    | ManualContactUpdateWithWhereUniqueNestedInput[]
    | ManualContactUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ManualContactUpsertWithWhereUniqueNestedInput[]
    | ManualContactUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    ManualContactWhereUniqueInput[] | ManualContactWhereUniqueInput
  >;
  connect?: Maybe<
    ManualContactWhereUniqueInput[] | ManualContactWhereUniqueInput
  >;
  set?: Maybe<ManualContactWhereUniqueInput[] | ManualContactWhereUniqueInput>;
  disconnect?: Maybe<
    ManualContactWhereUniqueInput[] | ManualContactWhereUniqueInput
  >;
  deleteMany?: Maybe<
    ManualContactScalarWhereInput[] | ManualContactScalarWhereInput
  >;
  updateMany?: Maybe<
    | ManualContactUpdateManyWithWhereNestedInput[]
    | ManualContactUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ManualContactUpdateWithWhereUniqueNestedInput {
  where: ManualContactWhereUniqueInput;
  data: ManualContactUpdateDataInput;
}

export interface ProfileFieldUpdateInput {
  user?: Maybe<UserUpdateOneWithoutProfileInput>;
  manualContacts?: Maybe<ManualContactUpdateManyWithoutProfileInput>;
  value?: Maybe<String>;
  type?: Maybe<Info>;
  privacy?: Maybe<Privacy>;
}

export interface ManualContactUpdateDataInput {
  name?: Maybe<String>;
  profile?: Maybe<ProfileFieldUpdateManyWithoutManualContactsInput>;
}

export interface ManualContactUpdateInput {
  name?: Maybe<String>;
  profile?: Maybe<ProfileFieldUpdateManyWithoutManualContactsInput>;
}

export interface ProfileFieldUpdateManyWithoutManualContactsInput {
  create?: Maybe<
    | ProfileFieldCreateWithoutManualContactsInput[]
    | ProfileFieldCreateWithoutManualContactsInput
  >;
  delete?: Maybe<ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput>;
  connect?: Maybe<
    ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput
  >;
  set?: Maybe<ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput>;
  disconnect?: Maybe<
    ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput
  >;
  update?: Maybe<
    | ProfileFieldUpdateWithWhereUniqueWithoutManualContactsInput[]
    | ProfileFieldUpdateWithWhereUniqueWithoutManualContactsInput
  >;
  upsert?: Maybe<
    | ProfileFieldUpsertWithWhereUniqueWithoutManualContactsInput[]
    | ProfileFieldUpsertWithWhereUniqueWithoutManualContactsInput
  >;
  deleteMany?: Maybe<
    ProfileFieldScalarWhereInput[] | ProfileFieldScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProfileFieldUpdateManyWithWhereNestedInput[]
    | ProfileFieldUpdateManyWithWhereNestedInput
  >;
}

export interface ConnectionUpdateManyMutationInput {
  status?: Maybe<ConnectionStatus>;
}

export interface ProfileFieldUpdateWithWhereUniqueWithoutManualContactsInput {
  where: ProfileFieldWhereUniqueInput;
  data: ProfileFieldUpdateWithoutManualContactsDataInput;
}

export interface ConferenceUpdateManyMutationInput {
  title?: Maybe<String>;
  start_date?: Maybe<DateTimeInput>;
  end_date?: Maybe<DateTimeInput>;
}

export interface ProfileFieldUpdateWithoutManualContactsDataInput {
  user?: Maybe<UserUpdateOneWithoutProfileInput>;
  value?: Maybe<String>;
  type?: Maybe<Info>;
  privacy?: Maybe<Privacy>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateOneWithoutProfileInput {
  create?: Maybe<UserCreateWithoutProfileInput>;
  update?: Maybe<UserUpdateWithoutProfileDataInput>;
  upsert?: Maybe<UserUpsertWithoutProfileInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpsertWithoutReceived_requestsInput {
  update: UserUpdateWithoutReceived_requestsDataInput;
  create: UserCreateWithoutReceived_requestsInput;
}

export interface UserUpdateWithoutProfileDataInput {
  name?: Maybe<String>;
  sent_requests?: Maybe<ConnectionUpdateManyWithoutSenderInput>;
  received_requests?: Maybe<ConnectionUpdateManyWithoutRecipientInput>;
  manualContacts?: Maybe<ManualContactUpdateManyInput>;
  conferences?: Maybe<ConferenceUpdateManyWithoutAttendeesInput>;
}

export interface CoordinateCreateOneInput {
  create?: Maybe<CoordinateCreateInput>;
  connect?: Maybe<CoordinateWhereUniqueInput>;
}

export interface ConnectionUpdateManyWithoutRecipientInput {
  create?: Maybe<
    | ConnectionCreateWithoutRecipientInput[]
    | ConnectionCreateWithoutRecipientInput
  >;
  delete?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  connect?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  set?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  disconnect?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  update?: Maybe<
    | ConnectionUpdateWithWhereUniqueWithoutRecipientInput[]
    | ConnectionUpdateWithWhereUniqueWithoutRecipientInput
  >;
  upsert?: Maybe<
    | ConnectionUpsertWithWhereUniqueWithoutRecipientInput[]
    | ConnectionUpsertWithWhereUniqueWithoutRecipientInput
  >;
  deleteMany?: Maybe<ConnectionScalarWhereInput[] | ConnectionScalarWhereInput>;
  updateMany?: Maybe<
    | ConnectionUpdateManyWithWhereNestedInput[]
    | ConnectionUpdateManyWithWhereNestedInput
  >;
}

export interface ProfileFieldCreateManyWithoutUserInput {
  create?: Maybe<
    ProfileFieldCreateWithoutUserInput[] | ProfileFieldCreateWithoutUserInput
  >;
  connect?: Maybe<
    ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput
  >;
}

export interface ConnectionUpdateWithWhereUniqueWithoutRecipientInput {
  where: ConnectionWhereUniqueInput;
  data: ConnectionUpdateWithoutRecipientDataInput;
}

export interface ConnectionCreateManyWithoutSenderInput {
  create?: Maybe<
    ConnectionCreateWithoutSenderInput[] | ConnectionCreateWithoutSenderInput
  >;
  connect?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
}

export interface ConnectionUpdateWithoutRecipientDataInput {
  sender?: Maybe<UserUpdateOneWithoutSent_requestsInput>;
  status?: Maybe<ConnectionStatus>;
}

export interface ManualContactCreateManyInput {
  create?: Maybe<ManualContactCreateInput[] | ManualContactCreateInput>;
  connect?: Maybe<
    ManualContactWhereUniqueInput[] | ManualContactWhereUniqueInput
  >;
}

export interface UserUpdateOneWithoutSent_requestsInput {
  create?: Maybe<UserCreateWithoutSent_requestsInput>;
  update?: Maybe<UserUpdateWithoutSent_requestsDataInput>;
  upsert?: Maybe<UserUpsertWithoutSent_requestsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateOneWithoutProfileInput {
  create?: Maybe<UserCreateWithoutProfileInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutSent_requestsDataInput {
  name?: Maybe<String>;
  profile?: Maybe<ProfileFieldUpdateManyWithoutUserInput>;
  received_requests?: Maybe<ConnectionUpdateManyWithoutRecipientInput>;
  manualContacts?: Maybe<ManualContactUpdateManyInput>;
  conferences?: Maybe<ConferenceUpdateManyWithoutAttendeesInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ConferenceUpdateManyWithoutAttendeesInput {
  create?: Maybe<
    | ConferenceCreateWithoutAttendeesInput[]
    | ConferenceCreateWithoutAttendeesInput
  >;
  delete?: Maybe<ConferenceWhereUniqueInput[] | ConferenceWhereUniqueInput>;
  connect?: Maybe<ConferenceWhereUniqueInput[] | ConferenceWhereUniqueInput>;
  set?: Maybe<ConferenceWhereUniqueInput[] | ConferenceWhereUniqueInput>;
  disconnect?: Maybe<ConferenceWhereUniqueInput[] | ConferenceWhereUniqueInput>;
  update?: Maybe<
    | ConferenceUpdateWithWhereUniqueWithoutAttendeesInput[]
    | ConferenceUpdateWithWhereUniqueWithoutAttendeesInput
  >;
  upsert?: Maybe<
    | ConferenceUpsertWithWhereUniqueWithoutAttendeesInput[]
    | ConferenceUpsertWithWhereUniqueWithoutAttendeesInput
  >;
  deleteMany?: Maybe<ConferenceScalarWhereInput[] | ConferenceScalarWhereInput>;
  updateMany?: Maybe<
    | ConferenceUpdateManyWithWhereNestedInput[]
    | ConferenceUpdateManyWithWhereNestedInput
  >;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  profile?: Maybe<ProfileFieldCreateManyWithoutUserInput>;
  sent_requests?: Maybe<ConnectionCreateManyWithoutSenderInput>;
  received_requests?: Maybe<ConnectionCreateManyWithoutRecipientInput>;
  manualContacts?: Maybe<ManualContactCreateManyInput>;
  conferences?: Maybe<ConferenceCreateManyWithoutAttendeesInput>;
}

export interface ConferenceUpdateWithWhereUniqueWithoutAttendeesInput {
  where: ConferenceWhereUniqueInput;
  data: ConferenceUpdateWithoutAttendeesDataInput;
}

export interface CoordinateUpdateManyMutationInput {
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
}

export interface ConferenceUpdateWithoutAttendeesDataInput {
  title?: Maybe<String>;
  start_date?: Maybe<DateTimeInput>;
  end_date?: Maybe<DateTimeInput>;
  location?: Maybe<CoordinateUpdateOneInput>;
}

export type ProfileFieldWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ConferenceUpsertWithWhereUniqueWithoutAttendeesInput {
  where: ConferenceWhereUniqueInput;
  update: ConferenceUpdateWithoutAttendeesDataInput;
  create: ConferenceCreateWithoutAttendeesInput;
}

export interface ManualContactCreateManyWithoutProfileInput {
  create?: Maybe<
    | ManualContactCreateWithoutProfileInput[]
    | ManualContactCreateWithoutProfileInput
  >;
  connect?: Maybe<
    ManualContactWhereUniqueInput[] | ManualContactWhereUniqueInput
  >;
}

export interface ConferenceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  start_date?: Maybe<DateTimeInput>;
  start_date_not?: Maybe<DateTimeInput>;
  start_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_date_lt?: Maybe<DateTimeInput>;
  start_date_lte?: Maybe<DateTimeInput>;
  start_date_gt?: Maybe<DateTimeInput>;
  start_date_gte?: Maybe<DateTimeInput>;
  end_date?: Maybe<DateTimeInput>;
  end_date_not?: Maybe<DateTimeInput>;
  end_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_date_lt?: Maybe<DateTimeInput>;
  end_date_lte?: Maybe<DateTimeInput>;
  end_date_gt?: Maybe<DateTimeInput>;
  end_date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ConferenceScalarWhereInput[] | ConferenceScalarWhereInput>;
  OR?: Maybe<ConferenceScalarWhereInput[] | ConferenceScalarWhereInput>;
  NOT?: Maybe<ConferenceScalarWhereInput[] | ConferenceScalarWhereInput>;
}

export interface ProfileFieldCreateManyWithoutManualContactsInput {
  create?: Maybe<
    | ProfileFieldCreateWithoutManualContactsInput[]
    | ProfileFieldCreateWithoutManualContactsInput
  >;
  connect?: Maybe<
    ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput
  >;
}

export interface ConferenceUpdateManyWithWhereNestedInput {
  where: ConferenceScalarWhereInput;
  data: ConferenceUpdateManyDataInput;
}

export interface ConnectionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ConnectionWhereInput>;
  AND?: Maybe<
    ConnectionSubscriptionWhereInput[] | ConnectionSubscriptionWhereInput
  >;
  OR?: Maybe<
    ConnectionSubscriptionWhereInput[] | ConnectionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ConnectionSubscriptionWhereInput[] | ConnectionSubscriptionWhereInput
  >;
}

export interface ConferenceUpdateManyDataInput {
  title?: Maybe<String>;
  start_date?: Maybe<DateTimeInput>;
  end_date?: Maybe<DateTimeInput>;
}

export type ManualContactWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ConnectionUpdateManyWithWhereNestedInput {
  where: ConnectionScalarWhereInput;
  data: ConnectionUpdateManyDataInput;
}

export interface ConnectionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  status?: Maybe<ConnectionStatus>;
  status_not?: Maybe<ConnectionStatus>;
  status_in?: Maybe<ConnectionStatus[] | ConnectionStatus>;
  status_not_in?: Maybe<ConnectionStatus[] | ConnectionStatus>;
  AND?: Maybe<ConnectionScalarWhereInput[] | ConnectionScalarWhereInput>;
  OR?: Maybe<ConnectionScalarWhereInput[] | ConnectionScalarWhereInput>;
  NOT?: Maybe<ConnectionScalarWhereInput[] | ConnectionScalarWhereInput>;
}

export interface ConnectionUpsertWithWhereUniqueWithoutRecipientInput {
  where: ConnectionWhereUniqueInput;
  update: ConnectionUpdateWithoutRecipientDataInput;
  create: ConnectionCreateWithoutRecipientInput;
}

export interface UserUpsertWithoutSent_requestsInput {
  update: UserUpdateWithoutSent_requestsDataInput;
  create: UserCreateWithoutSent_requestsInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProfileFieldCreateInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutProfileInput>;
  manualContacts?: Maybe<ManualContactCreateManyWithoutProfileInput>;
  value?: Maybe<String>;
  type?: Maybe<Info>;
  privacy?: Maybe<Privacy>;
}

export interface ConnectionCreateManyWithoutRecipientInput {
  create?: Maybe<
    | ConnectionCreateWithoutRecipientInput[]
    | ConnectionCreateWithoutRecipientInput
  >;
  connect?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
}

export interface UserCreateOneWithoutReceived_requestsInput {
  create?: Maybe<UserCreateWithoutReceived_requestsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateManyWithoutConferencesInput {
  create?: Maybe<
    UserCreateWithoutConferencesInput[] | UserCreateWithoutConferencesInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ConnectionConnection {
  pageInfo: PageInfo;
  edges: ConnectionEdge[];
}

export interface ConnectionConnectionPromise
  extends Promise<ConnectionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ConnectionEdge>>() => T;
  aggregate: <T = AggregateConnectionPromise>() => T;
}

export interface ConnectionConnectionSubscription
  extends Promise<AsyncIterator<ConnectionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConnectionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConnectionSubscription>() => T;
}

export interface ManualContactPreviousValues {
  id: ID_Output;
  name?: String;
}

export interface ManualContactPreviousValuesPromise
  extends Promise<ManualContactPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ManualContactPreviousValuesSubscription
  extends Promise<AsyncIterator<ManualContactPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateConference {
  count: Int;
}

export interface AggregateConferencePromise
  extends Promise<AggregateConference>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConferenceSubscription
  extends Promise<AsyncIterator<AggregateConference>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  profile: <T = FragmentableArray<ProfileField>>(args?: {
    where?: ProfileFieldWhereInput;
    orderBy?: ProfileFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sent_requests: <T = FragmentableArray<Connection>>(args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  received_requests: <T = FragmentableArray<Connection>>(args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  manualContacts: <T = FragmentableArray<ManualContact>>(args?: {
    where?: ManualContactWhereInput;
    orderBy?: ManualContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conferences: <T = FragmentableArray<Conference>>(args?: {
    where?: ConferenceWhereInput;
    orderBy?: ConferenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  profile: <T = Promise<AsyncIterator<ProfileFieldSubscription>>>(args?: {
    where?: ProfileFieldWhereInput;
    orderBy?: ProfileFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sent_requests: <T = Promise<AsyncIterator<ConnectionSubscription>>>(args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  received_requests: <
    T = Promise<AsyncIterator<ConnectionSubscription>>
  >(args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  manualContacts: <
    T = Promise<AsyncIterator<ManualContactSubscription>>
  >(args?: {
    where?: ManualContactWhereInput;
    orderBy?: ManualContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conferences: <T = Promise<AsyncIterator<ConferenceSubscription>>>(args?: {
    where?: ConferenceWhereInput;
    orderBy?: ConferenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  profile: <T = FragmentableArray<ProfileField>>(args?: {
    where?: ProfileFieldWhereInput;
    orderBy?: ProfileFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sent_requests: <T = FragmentableArray<Connection>>(args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  received_requests: <T = FragmentableArray<Connection>>(args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  manualContacts: <T = FragmentableArray<ManualContact>>(args?: {
    where?: ManualContactWhereInput;
    orderBy?: ManualContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  conferences: <T = FragmentableArray<Conference>>(args?: {
    where?: ConferenceWhereInput;
    orderBy?: ConferenceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ConferenceEdge {
  node: Conference;
  cursor: String;
}

export interface ConferenceEdgePromise
  extends Promise<ConferenceEdge>,
    Fragmentable {
  node: <T = ConferencePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ConferenceEdgeSubscription
  extends Promise<AsyncIterator<ConferenceEdge>>,
    Fragmentable {
  node: <T = ConferenceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProfileFieldPreviousValues {
  id: ID_Output;
  value?: String;
  type?: Info;
  privacy?: Privacy;
}

export interface ProfileFieldPreviousValuesPromise
  extends Promise<ProfileFieldPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  type: () => Promise<Info>;
  privacy: () => Promise<Privacy>;
}

export interface ProfileFieldPreviousValuesSubscription
  extends Promise<AsyncIterator<ProfileFieldPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Info>>;
  privacy: () => Promise<AsyncIterator<Privacy>>;
}

export interface AggregateProfileField {
  count: Int;
}

export interface AggregateProfileFieldPromise
  extends Promise<AggregateProfileField>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProfileFieldSubscription
  extends Promise<AsyncIterator<AggregateProfileField>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ProfileFieldConnection {
  pageInfo: PageInfo;
  edges: ProfileFieldEdge[];
}

export interface ProfileFieldConnectionPromise
  extends Promise<ProfileFieldConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProfileFieldEdge>>() => T;
  aggregate: <T = AggregateProfileFieldPromise>() => T;
}

export interface ProfileFieldConnectionSubscription
  extends Promise<AsyncIterator<ProfileFieldConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProfileFieldEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProfileFieldSubscription>() => T;
}

export interface ConferenceConnection {
  pageInfo: PageInfo;
  edges: ConferenceEdge[];
}

export interface ConferenceConnectionPromise
  extends Promise<ConferenceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ConferenceEdge>>() => T;
  aggregate: <T = AggregateConferencePromise>() => T;
}

export interface ConferenceConnectionSubscription
  extends Promise<AsyncIterator<ConferenceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConferenceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConferenceSubscription>() => T;
}

export interface ManualContactEdge {
  node: ManualContact;
  cursor: String;
}

export interface ManualContactEdgePromise
  extends Promise<ManualContactEdge>,
    Fragmentable {
  node: <T = ManualContactPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ManualContactEdgeSubscription
  extends Promise<AsyncIterator<ManualContactEdge>>,
    Fragmentable {
  node: <T = ManualContactSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProfileFieldSubscriptionPayload {
  mutation: MutationType;
  node: ProfileField;
  updatedFields: String[];
  previousValues: ProfileFieldPreviousValues;
}

export interface ProfileFieldSubscriptionPayloadPromise
  extends Promise<ProfileFieldSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProfileFieldPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProfileFieldPreviousValuesPromise>() => T;
}

export interface ProfileFieldSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProfileFieldSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProfileFieldSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProfileFieldPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface Conference {
  id: ID_Output;
  title?: String;
  start_date: DateTimeOutput;
  end_date: DateTimeOutput;
}

export interface ConferencePromise extends Promise<Conference>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  start_date: () => Promise<DateTimeOutput>;
  end_date: () => Promise<DateTimeOutput>;
  location: <T = CoordinatePromise>() => T;
  attendees: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ConferenceSubscription
  extends Promise<AsyncIterator<Conference>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  start_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  end_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  location: <T = CoordinateSubscription>() => T;
  attendees: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ConferenceNullablePromise
  extends Promise<Conference | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  start_date: () => Promise<DateTimeOutput>;
  end_date: () => Promise<DateTimeOutput>;
  location: <T = CoordinatePromise>() => T;
  attendees: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateCoordinate {
  count: Int;
}

export interface AggregateCoordinatePromise
  extends Promise<AggregateCoordinate>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCoordinateSubscription
  extends Promise<AsyncIterator<AggregateCoordinate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ConferenceSubscriptionPayload {
  mutation: MutationType;
  node: Conference;
  updatedFields: String[];
  previousValues: ConferencePreviousValues;
}

export interface ConferenceSubscriptionPayloadPromise
  extends Promise<ConferenceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ConferencePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConferencePreviousValuesPromise>() => T;
}

export interface ConferenceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConferenceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConferenceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConferencePreviousValuesSubscription>() => T;
}

export interface CoordinateConnection {
  pageInfo: PageInfo;
  edges: CoordinateEdge[];
}

export interface CoordinateConnectionPromise
  extends Promise<CoordinateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CoordinateEdge>>() => T;
  aggregate: <T = AggregateCoordinatePromise>() => T;
}

export interface CoordinateConnectionSubscription
  extends Promise<AsyncIterator<CoordinateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CoordinateEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCoordinateSubscription>() => T;
}

export interface ConferencePreviousValues {
  id: ID_Output;
  title?: String;
  start_date: DateTimeOutput;
  end_date: DateTimeOutput;
}

export interface ConferencePreviousValuesPromise
  extends Promise<ConferencePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  start_date: () => Promise<DateTimeOutput>;
  end_date: () => Promise<DateTimeOutput>;
}

export interface ConferencePreviousValuesSubscription
  extends Promise<AsyncIterator<ConferencePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  start_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  end_date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateConnection {
  count: Int;
}

export interface AggregateConnectionPromise
  extends Promise<AggregateConnection>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConnectionSubscription
  extends Promise<AsyncIterator<AggregateConnection>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Connection {
  id: ID_Output;
  status?: ConnectionStatus;
}

export interface ConnectionPromise extends Promise<Connection>, Fragmentable {
  id: () => Promise<ID_Output>;
  sender: <T = UserPromise>() => T;
  recipient: <T = UserPromise>() => T;
  status: () => Promise<ConnectionStatus>;
}

export interface ConnectionSubscription
  extends Promise<AsyncIterator<Connection>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sender: <T = UserSubscription>() => T;
  recipient: <T = UserSubscription>() => T;
  status: () => Promise<AsyncIterator<ConnectionStatus>>;
}

export interface ConnectionNullablePromise
  extends Promise<Connection | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sender: <T = UserPromise>() => T;
  recipient: <T = UserPromise>() => T;
  status: () => Promise<ConnectionStatus>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ConnectionSubscriptionPayload {
  mutation: MutationType;
  node: Connection;
  updatedFields: String[];
  previousValues: ConnectionPreviousValues;
}

export interface ConnectionSubscriptionPayloadPromise
  extends Promise<ConnectionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ConnectionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConnectionPreviousValuesPromise>() => T;
}

export interface ConnectionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConnectionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConnectionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConnectionPreviousValuesSubscription>() => T;
}

export interface ProfileFieldEdge {
  node: ProfileField;
  cursor: String;
}

export interface ProfileFieldEdgePromise
  extends Promise<ProfileFieldEdge>,
    Fragmentable {
  node: <T = ProfileFieldPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProfileFieldEdgeSubscription
  extends Promise<AsyncIterator<ProfileFieldEdge>>,
    Fragmentable {
  node: <T = ProfileFieldSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ConnectionPreviousValues {
  id: ID_Output;
  status?: ConnectionStatus;
}

export interface ConnectionPreviousValuesPromise
  extends Promise<ConnectionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<ConnectionStatus>;
}

export interface ConnectionPreviousValuesSubscription
  extends Promise<AsyncIterator<ConnectionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<ConnectionStatus>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Coordinate {
  id: ID_Output;
  latitude: Float;
  longitude: Float;
}

export interface CoordinatePromise extends Promise<Coordinate>, Fragmentable {
  id: () => Promise<ID_Output>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
}

export interface CoordinateSubscription
  extends Promise<AsyncIterator<Coordinate>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
}

export interface CoordinateNullablePromise
  extends Promise<Coordinate | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
}

export interface CoordinateEdge {
  node: Coordinate;
  cursor: String;
}

export interface CoordinateEdgePromise
  extends Promise<CoordinateEdge>,
    Fragmentable {
  node: <T = CoordinatePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CoordinateEdgeSubscription
  extends Promise<AsyncIterator<CoordinateEdge>>,
    Fragmentable {
  node: <T = CoordinateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ConnectionEdge {
  node: Connection;
  cursor: String;
}

export interface ConnectionEdgePromise
  extends Promise<ConnectionEdge>,
    Fragmentable {
  node: <T = ConnectionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ConnectionEdgeSubscription
  extends Promise<AsyncIterator<ConnectionEdge>>,
    Fragmentable {
  node: <T = ConnectionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ManualContactSubscriptionPayload {
  mutation: MutationType;
  node: ManualContact;
  updatedFields: String[];
  previousValues: ManualContactPreviousValues;
}

export interface ManualContactSubscriptionPayloadPromise
  extends Promise<ManualContactSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ManualContactPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ManualContactPreviousValuesPromise>() => T;
}

export interface ManualContactSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ManualContactSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ManualContactSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ManualContactPreviousValuesSubscription>() => T;
}

export interface ManualContact {
  id: ID_Output;
  name?: String;
}

export interface ManualContactPromise
  extends Promise<ManualContact>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  profile: <T = FragmentableArray<ProfileField>>(args?: {
    where?: ProfileFieldWhereInput;
    orderBy?: ProfileFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ManualContactSubscription
  extends Promise<AsyncIterator<ManualContact>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  profile: <T = Promise<AsyncIterator<ProfileFieldSubscription>>>(args?: {
    where?: ProfileFieldWhereInput;
    orderBy?: ProfileFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ManualContactNullablePromise
  extends Promise<ManualContact | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  profile: <T = FragmentableArray<ProfileField>>(args?: {
    where?: ProfileFieldWhereInput;
    orderBy?: ProfileFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CoordinatePreviousValues {
  id: ID_Output;
  latitude: Float;
  longitude: Float;
}

export interface CoordinatePreviousValuesPromise
  extends Promise<CoordinatePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
}

export interface CoordinatePreviousValuesSubscription
  extends Promise<AsyncIterator<CoordinatePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
}

export interface CoordinateSubscriptionPayload {
  mutation: MutationType;
  node: Coordinate;
  updatedFields: String[];
  previousValues: CoordinatePreviousValues;
}

export interface CoordinateSubscriptionPayloadPromise
  extends Promise<CoordinateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CoordinatePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CoordinatePreviousValuesPromise>() => T;
}

export interface CoordinateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CoordinateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CoordinateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CoordinatePreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ProfileField {
  id: ID_Output;
  value?: String;
  type?: Info;
  privacy?: Privacy;
}

export interface ProfileFieldPromise
  extends Promise<ProfileField>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  manualContacts: <T = FragmentableArray<ManualContact>>(args?: {
    where?: ManualContactWhereInput;
    orderBy?: ManualContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  value: () => Promise<String>;
  type: () => Promise<Info>;
  privacy: () => Promise<Privacy>;
}

export interface ProfileFieldSubscription
  extends Promise<AsyncIterator<ProfileField>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  manualContacts: <
    T = Promise<AsyncIterator<ManualContactSubscription>>
  >(args?: {
    where?: ManualContactWhereInput;
    orderBy?: ManualContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  value: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Info>>;
  privacy: () => Promise<AsyncIterator<Privacy>>;
}

export interface ProfileFieldNullablePromise
  extends Promise<ProfileField | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  manualContacts: <T = FragmentableArray<ManualContact>>(args?: {
    where?: ManualContactWhereInput;
    orderBy?: ManualContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  value: () => Promise<String>;
  type: () => Promise<Info>;
  privacy: () => Promise<Privacy>;
}

export interface ManualContactConnection {
  pageInfo: PageInfo;
  edges: ManualContactEdge[];
}

export interface ManualContactConnectionPromise
  extends Promise<ManualContactConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ManualContactEdge>>() => T;
  aggregate: <T = AggregateManualContactPromise>() => T;
}

export interface ManualContactConnectionSubscription
  extends Promise<AsyncIterator<ManualContactConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ManualContactEdgeSubscription>>>() => T;
  aggregate: <T = AggregateManualContactSubscription>() => T;
}

export interface AggregateManualContact {
  count: Int;
}

export interface AggregateManualContactPromise
  extends Promise<AggregateManualContact>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateManualContactSubscription
  extends Promise<AsyncIterator<AggregateManualContact>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Conference",
    embedded: false
  },
  {
    name: "Coordinate",
    embedded: false
  },
  {
    name: "ManualContact",
    embedded: false
  },
  {
    name: "ProfileField",
    embedded: false
  },
  {
    name: "Connection",
    embedded: false
  },
  {
    name: "ConnectionStatus",
    embedded: false
  },
  {
    name: "Info",
    embedded: false
  },
  {
    name: "Privacy",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
