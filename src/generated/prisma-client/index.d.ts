// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  profileField: (where?: ProfileFieldWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  profileField: (
    where: ProfileFieldWhereUniqueInput
  ) => ProfileFieldNullablePromise;
  profileFields: (args?: {
    where?: ProfileFieldWhereInput;
    orderBy?: ProfileFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProfileField>;
  profileFieldsConnection: (args?: {
    where?: ProfileFieldWhereInput;
    orderBy?: ProfileFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProfileFieldConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createProfileField: (data: ProfileFieldCreateInput) => ProfileFieldPromise;
  updateProfileField: (args: {
    data: ProfileFieldUpdateInput;
    where: ProfileFieldWhereUniqueInput;
  }) => ProfileFieldPromise;
  updateManyProfileFields: (args: {
    data: ProfileFieldUpdateManyMutationInput;
    where?: ProfileFieldWhereInput;
  }) => BatchPayloadPromise;
  upsertProfileField: (args: {
    where: ProfileFieldWhereUniqueInput;
    create: ProfileFieldCreateInput;
    update: ProfileFieldUpdateInput;
  }) => ProfileFieldPromise;
  deleteProfileField: (
    where: ProfileFieldWhereUniqueInput
  ) => ProfileFieldPromise;
  deleteManyProfileFields: (
    where?: ProfileFieldWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  profileField: (
    where?: ProfileFieldSubscriptionWhereInput
  ) => ProfileFieldSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ProfileFieldOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "value_ASC"
  | "value_DESC"
  | "type_ASC"
  | "type_DESC"
  | "privacy_ASC"
  | "privacy_DESC";

export type ProfileFieldPrivacy = "PUBLIC" | "PRIVATE" | "CONNECTED";

export type ProfileFieldType =
  | "EMAIL"
  | "PHONE"
  | "SOCIAL"
  | "AGE"
  | "GENDER"
  | "INDUSTRY"
  | "JOBTITLE"
  | "BIO";

export type UserOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ProfileFieldCreateInput {
  id?: Maybe<ID_Input>;
  userId: String;
  value: String;
  type: ProfileFieldType;
  privacy: ProfileFieldPrivacy;
}

export type ProfileFieldWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProfileFieldUpsertWithWhereUniqueNestedInput {
  where: ProfileFieldWhereUniqueInput;
  update: ProfileFieldUpdateDataInput;
  create: ProfileFieldCreateInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  profile?: Maybe<ProfileFieldCreateManyInput>;
}

export interface ProfileFieldUpdateDataInput {
  userId?: Maybe<String>;
  value?: Maybe<String>;
  type?: Maybe<ProfileFieldType>;
  privacy?: Maybe<ProfileFieldPrivacy>;
}

export interface ProfileFieldWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  type?: Maybe<ProfileFieldType>;
  type_not?: Maybe<ProfileFieldType>;
  type_in?: Maybe<ProfileFieldType[] | ProfileFieldType>;
  type_not_in?: Maybe<ProfileFieldType[] | ProfileFieldType>;
  privacy?: Maybe<ProfileFieldPrivacy>;
  privacy_not?: Maybe<ProfileFieldPrivacy>;
  privacy_in?: Maybe<ProfileFieldPrivacy[] | ProfileFieldPrivacy>;
  privacy_not_in?: Maybe<ProfileFieldPrivacy[] | ProfileFieldPrivacy>;
  AND?: Maybe<ProfileFieldWhereInput[] | ProfileFieldWhereInput>;
  OR?: Maybe<ProfileFieldWhereInput[] | ProfileFieldWhereInput>;
  NOT?: Maybe<ProfileFieldWhereInput[] | ProfileFieldWhereInput>;
}

export interface ProfileFieldUpdateWithWhereUniqueNestedInput {
  where: ProfileFieldWhereUniqueInput;
  data: ProfileFieldUpdateDataInput;
}

export interface ProfileFieldSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProfileFieldWhereInput>;
  AND?: Maybe<
    ProfileFieldSubscriptionWhereInput[] | ProfileFieldSubscriptionWhereInput
  >;
  OR?: Maybe<
    ProfileFieldSubscriptionWhereInput[] | ProfileFieldSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ProfileFieldSubscriptionWhereInput[] | ProfileFieldSubscriptionWhereInput
  >;
}

export interface ProfileFieldUpdateManyInput {
  create?: Maybe<ProfileFieldCreateInput[] | ProfileFieldCreateInput>;
  update?: Maybe<
    | ProfileFieldUpdateWithWhereUniqueNestedInput[]
    | ProfileFieldUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ProfileFieldUpsertWithWhereUniqueNestedInput[]
    | ProfileFieldUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput>;
  connect?: Maybe<
    ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput
  >;
  set?: Maybe<ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput>;
  disconnect?: Maybe<
    ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput
  >;
  deleteMany?: Maybe<
    ProfileFieldScalarWhereInput[] | ProfileFieldScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProfileFieldUpdateManyWithWhereNestedInput[]
    | ProfileFieldUpdateManyWithWhereNestedInput
  >;
}

export interface ProfileFieldUpdateManyDataInput {
  userId?: Maybe<String>;
  value?: Maybe<String>;
  type?: Maybe<ProfileFieldType>;
  privacy?: Maybe<ProfileFieldPrivacy>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  profile_every?: Maybe<ProfileFieldWhereInput>;
  profile_some?: Maybe<ProfileFieldWhereInput>;
  profile_none?: Maybe<ProfileFieldWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ProfileFieldCreateManyInput {
  create?: Maybe<ProfileFieldCreateInput[] | ProfileFieldCreateInput>;
  connect?: Maybe<
    ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput
  >;
}

export interface ProfileFieldUpdateManyMutationInput {
  userId?: Maybe<String>;
  value?: Maybe<String>;
  type?: Maybe<ProfileFieldType>;
  privacy?: Maybe<ProfileFieldPrivacy>;
}

export interface ProfileFieldUpdateInput {
  userId?: Maybe<String>;
  value?: Maybe<String>;
  type?: Maybe<ProfileFieldType>;
  privacy?: Maybe<ProfileFieldPrivacy>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  profile?: Maybe<ProfileFieldUpdateManyInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ProfileFieldScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  type?: Maybe<ProfileFieldType>;
  type_not?: Maybe<ProfileFieldType>;
  type_in?: Maybe<ProfileFieldType[] | ProfileFieldType>;
  type_not_in?: Maybe<ProfileFieldType[] | ProfileFieldType>;
  privacy?: Maybe<ProfileFieldPrivacy>;
  privacy_not?: Maybe<ProfileFieldPrivacy>;
  privacy_in?: Maybe<ProfileFieldPrivacy[] | ProfileFieldPrivacy>;
  privacy_not_in?: Maybe<ProfileFieldPrivacy[] | ProfileFieldPrivacy>;
  AND?: Maybe<ProfileFieldScalarWhereInput[] | ProfileFieldScalarWhereInput>;
  OR?: Maybe<ProfileFieldScalarWhereInput[] | ProfileFieldScalarWhereInput>;
  NOT?: Maybe<ProfileFieldScalarWhereInput[] | ProfileFieldScalarWhereInput>;
}

export interface ProfileFieldUpdateManyWithWhereNestedInput {
  where: ProfileFieldScalarWhereInput;
  data: ProfileFieldUpdateManyDataInput;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  profile: <T = FragmentableArray<ProfileField>>(args?: {
    where?: ProfileFieldWhereInput;
    orderBy?: ProfileFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  profile: <T = Promise<AsyncIterator<ProfileFieldSubscription>>>(args?: {
    where?: ProfileFieldWhereInput;
    orderBy?: ProfileFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  profile: <T = FragmentableArray<ProfileField>>(args?: {
    where?: ProfileFieldWhereInput;
    orderBy?: ProfileFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProfileFieldSubscriptionPayload {
  mutation: MutationType;
  node: ProfileField;
  updatedFields: String[];
  previousValues: ProfileFieldPreviousValues;
}

export interface ProfileFieldSubscriptionPayloadPromise
  extends Promise<ProfileFieldSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProfileFieldPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProfileFieldPreviousValuesPromise>() => T;
}

export interface ProfileFieldSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProfileFieldSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProfileFieldSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProfileFieldPreviousValuesSubscription>() => T;
}

export interface AggregateProfileField {
  count: Int;
}

export interface AggregateProfileFieldPromise
  extends Promise<AggregateProfileField>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProfileFieldSubscription
  extends Promise<AsyncIterator<AggregateProfileField>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProfileFieldEdge {
  node: ProfileField;
  cursor: String;
}

export interface ProfileFieldEdgePromise
  extends Promise<ProfileFieldEdge>,
    Fragmentable {
  node: <T = ProfileFieldPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProfileFieldEdgeSubscription
  extends Promise<AsyncIterator<ProfileFieldEdge>>,
    Fragmentable {
  node: <T = ProfileFieldSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProfileField {
  id: ID_Output;
  userId: String;
  value: String;
  type: ProfileFieldType;
  privacy: ProfileFieldPrivacy;
}

export interface ProfileFieldPromise
  extends Promise<ProfileField>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<String>;
  value: () => Promise<String>;
  type: () => Promise<ProfileFieldType>;
  privacy: () => Promise<ProfileFieldPrivacy>;
}

export interface ProfileFieldSubscription
  extends Promise<AsyncIterator<ProfileField>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ProfileFieldType>>;
  privacy: () => Promise<AsyncIterator<ProfileFieldPrivacy>>;
}

export interface ProfileFieldNullablePromise
  extends Promise<ProfileField | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<String>;
  value: () => Promise<String>;
  type: () => Promise<ProfileFieldType>;
  privacy: () => Promise<ProfileFieldPrivacy>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ProfileFieldPreviousValues {
  id: ID_Output;
  userId: String;
  value: String;
  type: ProfileFieldType;
  privacy: ProfileFieldPrivacy;
}

export interface ProfileFieldPreviousValuesPromise
  extends Promise<ProfileFieldPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<String>;
  value: () => Promise<String>;
  type: () => Promise<ProfileFieldType>;
  privacy: () => Promise<ProfileFieldPrivacy>;
}

export interface ProfileFieldPreviousValuesSubscription
  extends Promise<AsyncIterator<ProfileFieldPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ProfileFieldType>>;
  privacy: () => Promise<AsyncIterator<ProfileFieldPrivacy>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ProfileFieldConnection {
  pageInfo: PageInfo;
  edges: ProfileFieldEdge[];
}

export interface ProfileFieldConnectionPromise
  extends Promise<ProfileFieldConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProfileFieldEdge>>() => T;
  aggregate: <T = AggregateProfileFieldPromise>() => T;
}

export interface ProfileFieldConnectionSubscription
  extends Promise<AsyncIterator<ProfileFieldConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProfileFieldEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProfileFieldSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "ProfileField",
    embedded: false
  },
  {
    name: "ProfileFieldType",
    embedded: false
  },
  {
    name: "ProfileFieldPrivacy",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
