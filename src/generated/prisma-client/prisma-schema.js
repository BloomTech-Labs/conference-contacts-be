module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateConference {
  count: Int!
}

type AggregateConnection {
  count: Int!
}

type AggregateCoordinate {
  count: Int!
}

type AggregateManualContact {
  count: Int!
}

type AggregateProfileField {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Conference {
  id: ID!
  title: String
  start_date: DateTime!
  end_date: DateTime!
  location: Coordinate
  attendees(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type ConferenceConnection {
  pageInfo: PageInfo!
  edges: [ConferenceEdge]!
  aggregate: AggregateConference!
}

input ConferenceCreateInput {
  id: ID
  title: String
  start_date: DateTime!
  end_date: DateTime!
  location: CoordinateCreateOneInput
  attendees: UserCreateManyWithoutConferencesInput
}

input ConferenceCreateManyWithoutAttendeesInput {
  create: [ConferenceCreateWithoutAttendeesInput!]
  connect: [ConferenceWhereUniqueInput!]
}

input ConferenceCreateWithoutAttendeesInput {
  id: ID
  title: String
  start_date: DateTime!
  end_date: DateTime!
  location: CoordinateCreateOneInput
}

type ConferenceEdge {
  node: Conference!
  cursor: String!
}

enum ConferenceOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  start_date_ASC
  start_date_DESC
  end_date_ASC
  end_date_DESC
}

type ConferencePreviousValues {
  id: ID!
  title: String
  start_date: DateTime!
  end_date: DateTime!
}

input ConferenceScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  start_date: DateTime
  start_date_not: DateTime
  start_date_in: [DateTime!]
  start_date_not_in: [DateTime!]
  start_date_lt: DateTime
  start_date_lte: DateTime
  start_date_gt: DateTime
  start_date_gte: DateTime
  end_date: DateTime
  end_date_not: DateTime
  end_date_in: [DateTime!]
  end_date_not_in: [DateTime!]
  end_date_lt: DateTime
  end_date_lte: DateTime
  end_date_gt: DateTime
  end_date_gte: DateTime
  AND: [ConferenceScalarWhereInput!]
  OR: [ConferenceScalarWhereInput!]
  NOT: [ConferenceScalarWhereInput!]
}

type ConferenceSubscriptionPayload {
  mutation: MutationType!
  node: Conference
  updatedFields: [String!]
  previousValues: ConferencePreviousValues
}

input ConferenceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConferenceWhereInput
  AND: [ConferenceSubscriptionWhereInput!]
  OR: [ConferenceSubscriptionWhereInput!]
  NOT: [ConferenceSubscriptionWhereInput!]
}

input ConferenceUpdateInput {
  title: String
  start_date: DateTime
  end_date: DateTime
  location: CoordinateUpdateOneInput
  attendees: UserUpdateManyWithoutConferencesInput
}

input ConferenceUpdateManyDataInput {
  title: String
  start_date: DateTime
  end_date: DateTime
}

input ConferenceUpdateManyMutationInput {
  title: String
  start_date: DateTime
  end_date: DateTime
}

input ConferenceUpdateManyWithoutAttendeesInput {
  create: [ConferenceCreateWithoutAttendeesInput!]
  delete: [ConferenceWhereUniqueInput!]
  connect: [ConferenceWhereUniqueInput!]
  set: [ConferenceWhereUniqueInput!]
  disconnect: [ConferenceWhereUniqueInput!]
  update: [ConferenceUpdateWithWhereUniqueWithoutAttendeesInput!]
  upsert: [ConferenceUpsertWithWhereUniqueWithoutAttendeesInput!]
  deleteMany: [ConferenceScalarWhereInput!]
  updateMany: [ConferenceUpdateManyWithWhereNestedInput!]
}

input ConferenceUpdateManyWithWhereNestedInput {
  where: ConferenceScalarWhereInput!
  data: ConferenceUpdateManyDataInput!
}

input ConferenceUpdateWithoutAttendeesDataInput {
  title: String
  start_date: DateTime
  end_date: DateTime
  location: CoordinateUpdateOneInput
}

input ConferenceUpdateWithWhereUniqueWithoutAttendeesInput {
  where: ConferenceWhereUniqueInput!
  data: ConferenceUpdateWithoutAttendeesDataInput!
}

input ConferenceUpsertWithWhereUniqueWithoutAttendeesInput {
  where: ConferenceWhereUniqueInput!
  update: ConferenceUpdateWithoutAttendeesDataInput!
  create: ConferenceCreateWithoutAttendeesInput!
}

input ConferenceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  start_date: DateTime
  start_date_not: DateTime
  start_date_in: [DateTime!]
  start_date_not_in: [DateTime!]
  start_date_lt: DateTime
  start_date_lte: DateTime
  start_date_gt: DateTime
  start_date_gte: DateTime
  end_date: DateTime
  end_date_not: DateTime
  end_date_in: [DateTime!]
  end_date_not_in: [DateTime!]
  end_date_lt: DateTime
  end_date_lte: DateTime
  end_date_gt: DateTime
  end_date_gte: DateTime
  location: CoordinateWhereInput
  attendees_every: UserWhereInput
  attendees_some: UserWhereInput
  attendees_none: UserWhereInput
  AND: [ConferenceWhereInput!]
  OR: [ConferenceWhereInput!]
  NOT: [ConferenceWhereInput!]
}

input ConferenceWhereUniqueInput {
  id: ID
}

type Connection {
  id: ID!
  sender: User
  recipient: User
  status: ConnectionStatus
}

type ConnectionConnection {
  pageInfo: PageInfo!
  edges: [ConnectionEdge]!
  aggregate: AggregateConnection!
}

input ConnectionCreateInput {
  id: ID
  sender: UserCreateOneWithoutSent_requestsInput
  recipient: UserCreateOneWithoutReceived_requestsInput
  status: ConnectionStatus
}

input ConnectionCreateManyWithoutRecipientInput {
  create: [ConnectionCreateWithoutRecipientInput!]
  connect: [ConnectionWhereUniqueInput!]
}

input ConnectionCreateManyWithoutSenderInput {
  create: [ConnectionCreateWithoutSenderInput!]
  connect: [ConnectionWhereUniqueInput!]
}

input ConnectionCreateWithoutRecipientInput {
  id: ID
  sender: UserCreateOneWithoutSent_requestsInput
  status: ConnectionStatus
}

input ConnectionCreateWithoutSenderInput {
  id: ID
  recipient: UserCreateOneWithoutReceived_requestsInput
  status: ConnectionStatus
}

type ConnectionEdge {
  node: Connection!
  cursor: String!
}

enum ConnectionOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
}

type ConnectionPreviousValues {
  id: ID!
  status: ConnectionStatus
}

input ConnectionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: ConnectionStatus
  status_not: ConnectionStatus
  status_in: [ConnectionStatus!]
  status_not_in: [ConnectionStatus!]
  AND: [ConnectionScalarWhereInput!]
  OR: [ConnectionScalarWhereInput!]
  NOT: [ConnectionScalarWhereInput!]
}

enum ConnectionStatus {
  PENDING
  CONNECTED
  BLOCKED
}

type ConnectionSubscriptionPayload {
  mutation: MutationType!
  node: Connection
  updatedFields: [String!]
  previousValues: ConnectionPreviousValues
}

input ConnectionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConnectionWhereInput
  AND: [ConnectionSubscriptionWhereInput!]
  OR: [ConnectionSubscriptionWhereInput!]
  NOT: [ConnectionSubscriptionWhereInput!]
}

input ConnectionUpdateInput {
  sender: UserUpdateOneWithoutSent_requestsInput
  recipient: UserUpdateOneWithoutReceived_requestsInput
  status: ConnectionStatus
}

input ConnectionUpdateManyDataInput {
  status: ConnectionStatus
}

input ConnectionUpdateManyMutationInput {
  status: ConnectionStatus
}

input ConnectionUpdateManyWithoutRecipientInput {
  create: [ConnectionCreateWithoutRecipientInput!]
  delete: [ConnectionWhereUniqueInput!]
  connect: [ConnectionWhereUniqueInput!]
  set: [ConnectionWhereUniqueInput!]
  disconnect: [ConnectionWhereUniqueInput!]
  update: [ConnectionUpdateWithWhereUniqueWithoutRecipientInput!]
  upsert: [ConnectionUpsertWithWhereUniqueWithoutRecipientInput!]
  deleteMany: [ConnectionScalarWhereInput!]
  updateMany: [ConnectionUpdateManyWithWhereNestedInput!]
}

input ConnectionUpdateManyWithoutSenderInput {
  create: [ConnectionCreateWithoutSenderInput!]
  delete: [ConnectionWhereUniqueInput!]
  connect: [ConnectionWhereUniqueInput!]
  set: [ConnectionWhereUniqueInput!]
  disconnect: [ConnectionWhereUniqueInput!]
  update: [ConnectionUpdateWithWhereUniqueWithoutSenderInput!]
  upsert: [ConnectionUpsertWithWhereUniqueWithoutSenderInput!]
  deleteMany: [ConnectionScalarWhereInput!]
  updateMany: [ConnectionUpdateManyWithWhereNestedInput!]
}

input ConnectionUpdateManyWithWhereNestedInput {
  where: ConnectionScalarWhereInput!
  data: ConnectionUpdateManyDataInput!
}

input ConnectionUpdateWithoutRecipientDataInput {
  sender: UserUpdateOneWithoutSent_requestsInput
  status: ConnectionStatus
}

input ConnectionUpdateWithoutSenderDataInput {
  recipient: UserUpdateOneWithoutReceived_requestsInput
  status: ConnectionStatus
}

input ConnectionUpdateWithWhereUniqueWithoutRecipientInput {
  where: ConnectionWhereUniqueInput!
  data: ConnectionUpdateWithoutRecipientDataInput!
}

input ConnectionUpdateWithWhereUniqueWithoutSenderInput {
  where: ConnectionWhereUniqueInput!
  data: ConnectionUpdateWithoutSenderDataInput!
}

input ConnectionUpsertWithWhereUniqueWithoutRecipientInput {
  where: ConnectionWhereUniqueInput!
  update: ConnectionUpdateWithoutRecipientDataInput!
  create: ConnectionCreateWithoutRecipientInput!
}

input ConnectionUpsertWithWhereUniqueWithoutSenderInput {
  where: ConnectionWhereUniqueInput!
  update: ConnectionUpdateWithoutSenderDataInput!
  create: ConnectionCreateWithoutSenderInput!
}

input ConnectionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sender: UserWhereInput
  recipient: UserWhereInput
  status: ConnectionStatus
  status_not: ConnectionStatus
  status_in: [ConnectionStatus!]
  status_not_in: [ConnectionStatus!]
  AND: [ConnectionWhereInput!]
  OR: [ConnectionWhereInput!]
  NOT: [ConnectionWhereInput!]
}

input ConnectionWhereUniqueInput {
  id: ID
}

type Coordinate {
  id: ID!
  latitude: Float!
  longitude: Float!
}

type CoordinateConnection {
  pageInfo: PageInfo!
  edges: [CoordinateEdge]!
  aggregate: AggregateCoordinate!
}

input CoordinateCreateInput {
  id: ID
  latitude: Float!
  longitude: Float!
}

input CoordinateCreateOneInput {
  create: CoordinateCreateInput
  connect: CoordinateWhereUniqueInput
}

type CoordinateEdge {
  node: Coordinate!
  cursor: String!
}

enum CoordinateOrderByInput {
  id_ASC
  id_DESC
  latitude_ASC
  latitude_DESC
  longitude_ASC
  longitude_DESC
}

type CoordinatePreviousValues {
  id: ID!
  latitude: Float!
  longitude: Float!
}

type CoordinateSubscriptionPayload {
  mutation: MutationType!
  node: Coordinate
  updatedFields: [String!]
  previousValues: CoordinatePreviousValues
}

input CoordinateSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CoordinateWhereInput
  AND: [CoordinateSubscriptionWhereInput!]
  OR: [CoordinateSubscriptionWhereInput!]
  NOT: [CoordinateSubscriptionWhereInput!]
}

input CoordinateUpdateDataInput {
  latitude: Float
  longitude: Float
}

input CoordinateUpdateInput {
  latitude: Float
  longitude: Float
}

input CoordinateUpdateManyMutationInput {
  latitude: Float
  longitude: Float
}

input CoordinateUpdateOneInput {
  create: CoordinateCreateInput
  update: CoordinateUpdateDataInput
  upsert: CoordinateUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CoordinateWhereUniqueInput
}

input CoordinateUpsertNestedInput {
  update: CoordinateUpdateDataInput!
  create: CoordinateCreateInput!
}

input CoordinateWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  latitude: Float
  latitude_not: Float
  latitude_in: [Float!]
  latitude_not_in: [Float!]
  latitude_lt: Float
  latitude_lte: Float
  latitude_gt: Float
  latitude_gte: Float
  longitude: Float
  longitude_not: Float
  longitude_in: [Float!]
  longitude_not_in: [Float!]
  longitude_lt: Float
  longitude_lte: Float
  longitude_gt: Float
  longitude_gte: Float
  AND: [CoordinateWhereInput!]
  OR: [CoordinateWhereInput!]
  NOT: [CoordinateWhereInput!]
}

input CoordinateWhereUniqueInput {
  id: ID
}

scalar DateTime

enum Info {
  EMAIL
  PHONE
  SOCIAL
  AGE
  GENDER
  INDUSTRY
  JOBTITLE
  BIO
}

scalar Long

type ManualContact {
  id: ID!
  name: String
  profile(where: ProfileFieldWhereInput, orderBy: ProfileFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProfileField!]
}

type ManualContactConnection {
  pageInfo: PageInfo!
  edges: [ManualContactEdge]!
  aggregate: AggregateManualContact!
}

input ManualContactCreateInput {
  id: ID
  name: String
  profile: ProfileFieldCreateManyWithoutManualContactsInput
}

input ManualContactCreateManyInput {
  create: [ManualContactCreateInput!]
  connect: [ManualContactWhereUniqueInput!]
}

input ManualContactCreateManyWithoutProfileInput {
  create: [ManualContactCreateWithoutProfileInput!]
  connect: [ManualContactWhereUniqueInput!]
}

input ManualContactCreateWithoutProfileInput {
  id: ID
  name: String
}

type ManualContactEdge {
  node: ManualContact!
  cursor: String!
}

enum ManualContactOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type ManualContactPreviousValues {
  id: ID!
  name: String
}

input ManualContactScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [ManualContactScalarWhereInput!]
  OR: [ManualContactScalarWhereInput!]
  NOT: [ManualContactScalarWhereInput!]
}

type ManualContactSubscriptionPayload {
  mutation: MutationType!
  node: ManualContact
  updatedFields: [String!]
  previousValues: ManualContactPreviousValues
}

input ManualContactSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ManualContactWhereInput
  AND: [ManualContactSubscriptionWhereInput!]
  OR: [ManualContactSubscriptionWhereInput!]
  NOT: [ManualContactSubscriptionWhereInput!]
}

input ManualContactUpdateDataInput {
  name: String
  profile: ProfileFieldUpdateManyWithoutManualContactsInput
}

input ManualContactUpdateInput {
  name: String
  profile: ProfileFieldUpdateManyWithoutManualContactsInput
}

input ManualContactUpdateManyDataInput {
  name: String
}

input ManualContactUpdateManyInput {
  create: [ManualContactCreateInput!]
  update: [ManualContactUpdateWithWhereUniqueNestedInput!]
  upsert: [ManualContactUpsertWithWhereUniqueNestedInput!]
  delete: [ManualContactWhereUniqueInput!]
  connect: [ManualContactWhereUniqueInput!]
  set: [ManualContactWhereUniqueInput!]
  disconnect: [ManualContactWhereUniqueInput!]
  deleteMany: [ManualContactScalarWhereInput!]
  updateMany: [ManualContactUpdateManyWithWhereNestedInput!]
}

input ManualContactUpdateManyMutationInput {
  name: String
}

input ManualContactUpdateManyWithoutProfileInput {
  create: [ManualContactCreateWithoutProfileInput!]
  delete: [ManualContactWhereUniqueInput!]
  connect: [ManualContactWhereUniqueInput!]
  set: [ManualContactWhereUniqueInput!]
  disconnect: [ManualContactWhereUniqueInput!]
  update: [ManualContactUpdateWithWhereUniqueWithoutProfileInput!]
  upsert: [ManualContactUpsertWithWhereUniqueWithoutProfileInput!]
  deleteMany: [ManualContactScalarWhereInput!]
  updateMany: [ManualContactUpdateManyWithWhereNestedInput!]
}

input ManualContactUpdateManyWithWhereNestedInput {
  where: ManualContactScalarWhereInput!
  data: ManualContactUpdateManyDataInput!
}

input ManualContactUpdateWithoutProfileDataInput {
  name: String
}

input ManualContactUpdateWithWhereUniqueNestedInput {
  where: ManualContactWhereUniqueInput!
  data: ManualContactUpdateDataInput!
}

input ManualContactUpdateWithWhereUniqueWithoutProfileInput {
  where: ManualContactWhereUniqueInput!
  data: ManualContactUpdateWithoutProfileDataInput!
}

input ManualContactUpsertWithWhereUniqueNestedInput {
  where: ManualContactWhereUniqueInput!
  update: ManualContactUpdateDataInput!
  create: ManualContactCreateInput!
}

input ManualContactUpsertWithWhereUniqueWithoutProfileInput {
  where: ManualContactWhereUniqueInput!
  update: ManualContactUpdateWithoutProfileDataInput!
  create: ManualContactCreateWithoutProfileInput!
}

input ManualContactWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  profile_every: ProfileFieldWhereInput
  profile_some: ProfileFieldWhereInput
  profile_none: ProfileFieldWhereInput
  AND: [ManualContactWhereInput!]
  OR: [ManualContactWhereInput!]
  NOT: [ManualContactWhereInput!]
}

input ManualContactWhereUniqueInput {
  id: ID
}

type Mutation {
  createConference(data: ConferenceCreateInput!): Conference!
  updateConference(data: ConferenceUpdateInput!, where: ConferenceWhereUniqueInput!): Conference
  updateManyConferences(data: ConferenceUpdateManyMutationInput!, where: ConferenceWhereInput): BatchPayload!
  upsertConference(where: ConferenceWhereUniqueInput!, create: ConferenceCreateInput!, update: ConferenceUpdateInput!): Conference!
  deleteConference(where: ConferenceWhereUniqueInput!): Conference
  deleteManyConferences(where: ConferenceWhereInput): BatchPayload!
  createConnection(data: ConnectionCreateInput!): Connection!
  updateConnection(data: ConnectionUpdateInput!, where: ConnectionWhereUniqueInput!): Connection
  updateManyConnections(data: ConnectionUpdateManyMutationInput!, where: ConnectionWhereInput): BatchPayload!
  upsertConnection(where: ConnectionWhereUniqueInput!, create: ConnectionCreateInput!, update: ConnectionUpdateInput!): Connection!
  deleteConnection(where: ConnectionWhereUniqueInput!): Connection
  deleteManyConnections(where: ConnectionWhereInput): BatchPayload!
  createCoordinate(data: CoordinateCreateInput!): Coordinate!
  updateCoordinate(data: CoordinateUpdateInput!, where: CoordinateWhereUniqueInput!): Coordinate
  updateManyCoordinates(data: CoordinateUpdateManyMutationInput!, where: CoordinateWhereInput): BatchPayload!
  upsertCoordinate(where: CoordinateWhereUniqueInput!, create: CoordinateCreateInput!, update: CoordinateUpdateInput!): Coordinate!
  deleteCoordinate(where: CoordinateWhereUniqueInput!): Coordinate
  deleteManyCoordinates(where: CoordinateWhereInput): BatchPayload!
  createManualContact(data: ManualContactCreateInput!): ManualContact!
  updateManualContact(data: ManualContactUpdateInput!, where: ManualContactWhereUniqueInput!): ManualContact
  updateManyManualContacts(data: ManualContactUpdateManyMutationInput!, where: ManualContactWhereInput): BatchPayload!
  upsertManualContact(where: ManualContactWhereUniqueInput!, create: ManualContactCreateInput!, update: ManualContactUpdateInput!): ManualContact!
  deleteManualContact(where: ManualContactWhereUniqueInput!): ManualContact
  deleteManyManualContacts(where: ManualContactWhereInput): BatchPayload!
  createProfileField(data: ProfileFieldCreateInput!): ProfileField!
  updateProfileField(data: ProfileFieldUpdateInput!, where: ProfileFieldWhereUniqueInput!): ProfileField
  updateManyProfileFields(data: ProfileFieldUpdateManyMutationInput!, where: ProfileFieldWhereInput): BatchPayload!
  upsertProfileField(where: ProfileFieldWhereUniqueInput!, create: ProfileFieldCreateInput!, update: ProfileFieldUpdateInput!): ProfileField!
  deleteProfileField(where: ProfileFieldWhereUniqueInput!): ProfileField
  deleteManyProfileFields(where: ProfileFieldWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum Privacy {
  PUBLIC
  PRIVATE
  CONNECTED
}

type ProfileField {
  id: ID!
  user: User
  manualContacts(where: ManualContactWhereInput, orderBy: ManualContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ManualContact!]
  value: String
  type: Info
  privacy: Privacy
}

type ProfileFieldConnection {
  pageInfo: PageInfo!
  edges: [ProfileFieldEdge]!
  aggregate: AggregateProfileField!
}

input ProfileFieldCreateInput {
  id: ID
  user: UserCreateOneWithoutProfileInput
  manualContacts: ManualContactCreateManyWithoutProfileInput
  value: String
  type: Info
  privacy: Privacy
}

input ProfileFieldCreateManyWithoutManualContactsInput {
  create: [ProfileFieldCreateWithoutManualContactsInput!]
  connect: [ProfileFieldWhereUniqueInput!]
}

input ProfileFieldCreateManyWithoutUserInput {
  create: [ProfileFieldCreateWithoutUserInput!]
  connect: [ProfileFieldWhereUniqueInput!]
}

input ProfileFieldCreateWithoutManualContactsInput {
  id: ID
  user: UserCreateOneWithoutProfileInput
  value: String
  type: Info
  privacy: Privacy
}

input ProfileFieldCreateWithoutUserInput {
  id: ID
  manualContacts: ManualContactCreateManyWithoutProfileInput
  value: String
  type: Info
  privacy: Privacy
}

type ProfileFieldEdge {
  node: ProfileField!
  cursor: String!
}

enum ProfileFieldOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
  type_ASC
  type_DESC
  privacy_ASC
  privacy_DESC
}

type ProfileFieldPreviousValues {
  id: ID!
  value: String
  type: Info
  privacy: Privacy
}

input ProfileFieldScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  type: Info
  type_not: Info
  type_in: [Info!]
  type_not_in: [Info!]
  privacy: Privacy
  privacy_not: Privacy
  privacy_in: [Privacy!]
  privacy_not_in: [Privacy!]
  AND: [ProfileFieldScalarWhereInput!]
  OR: [ProfileFieldScalarWhereInput!]
  NOT: [ProfileFieldScalarWhereInput!]
}

type ProfileFieldSubscriptionPayload {
  mutation: MutationType!
  node: ProfileField
  updatedFields: [String!]
  previousValues: ProfileFieldPreviousValues
}

input ProfileFieldSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProfileFieldWhereInput
  AND: [ProfileFieldSubscriptionWhereInput!]
  OR: [ProfileFieldSubscriptionWhereInput!]
  NOT: [ProfileFieldSubscriptionWhereInput!]
}

input ProfileFieldUpdateInput {
  user: UserUpdateOneWithoutProfileInput
  manualContacts: ManualContactUpdateManyWithoutProfileInput
  value: String
  type: Info
  privacy: Privacy
}

input ProfileFieldUpdateManyDataInput {
  value: String
  type: Info
  privacy: Privacy
}

input ProfileFieldUpdateManyMutationInput {
  value: String
  type: Info
  privacy: Privacy
}

input ProfileFieldUpdateManyWithoutManualContactsInput {
  create: [ProfileFieldCreateWithoutManualContactsInput!]
  delete: [ProfileFieldWhereUniqueInput!]
  connect: [ProfileFieldWhereUniqueInput!]
  set: [ProfileFieldWhereUniqueInput!]
  disconnect: [ProfileFieldWhereUniqueInput!]
  update: [ProfileFieldUpdateWithWhereUniqueWithoutManualContactsInput!]
  upsert: [ProfileFieldUpsertWithWhereUniqueWithoutManualContactsInput!]
  deleteMany: [ProfileFieldScalarWhereInput!]
  updateMany: [ProfileFieldUpdateManyWithWhereNestedInput!]
}

input ProfileFieldUpdateManyWithoutUserInput {
  create: [ProfileFieldCreateWithoutUserInput!]
  delete: [ProfileFieldWhereUniqueInput!]
  connect: [ProfileFieldWhereUniqueInput!]
  set: [ProfileFieldWhereUniqueInput!]
  disconnect: [ProfileFieldWhereUniqueInput!]
  update: [ProfileFieldUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ProfileFieldUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ProfileFieldScalarWhereInput!]
  updateMany: [ProfileFieldUpdateManyWithWhereNestedInput!]
}

input ProfileFieldUpdateManyWithWhereNestedInput {
  where: ProfileFieldScalarWhereInput!
  data: ProfileFieldUpdateManyDataInput!
}

input ProfileFieldUpdateWithoutManualContactsDataInput {
  user: UserUpdateOneWithoutProfileInput
  value: String
  type: Info
  privacy: Privacy
}

input ProfileFieldUpdateWithoutUserDataInput {
  manualContacts: ManualContactUpdateManyWithoutProfileInput
  value: String
  type: Info
  privacy: Privacy
}

input ProfileFieldUpdateWithWhereUniqueWithoutManualContactsInput {
  where: ProfileFieldWhereUniqueInput!
  data: ProfileFieldUpdateWithoutManualContactsDataInput!
}

input ProfileFieldUpdateWithWhereUniqueWithoutUserInput {
  where: ProfileFieldWhereUniqueInput!
  data: ProfileFieldUpdateWithoutUserDataInput!
}

input ProfileFieldUpsertWithWhereUniqueWithoutManualContactsInput {
  where: ProfileFieldWhereUniqueInput!
  update: ProfileFieldUpdateWithoutManualContactsDataInput!
  create: ProfileFieldCreateWithoutManualContactsInput!
}

input ProfileFieldUpsertWithWhereUniqueWithoutUserInput {
  where: ProfileFieldWhereUniqueInput!
  update: ProfileFieldUpdateWithoutUserDataInput!
  create: ProfileFieldCreateWithoutUserInput!
}

input ProfileFieldWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  manualContacts_every: ManualContactWhereInput
  manualContacts_some: ManualContactWhereInput
  manualContacts_none: ManualContactWhereInput
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  type: Info
  type_not: Info
  type_in: [Info!]
  type_not_in: [Info!]
  privacy: Privacy
  privacy_not: Privacy
  privacy_in: [Privacy!]
  privacy_not_in: [Privacy!]
  AND: [ProfileFieldWhereInput!]
  OR: [ProfileFieldWhereInput!]
  NOT: [ProfileFieldWhereInput!]
}

input ProfileFieldWhereUniqueInput {
  id: ID
}

type Query {
  conference(where: ConferenceWhereUniqueInput!): Conference
  conferences(where: ConferenceWhereInput, orderBy: ConferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Conference]!
  conferencesConnection(where: ConferenceWhereInput, orderBy: ConferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConferenceConnection!
  connection(where: ConnectionWhereUniqueInput!): Connection
  connections(where: ConnectionWhereInput, orderBy: ConnectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Connection]!
  connectionsConnection(where: ConnectionWhereInput, orderBy: ConnectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConnectionConnection!
  coordinate(where: CoordinateWhereUniqueInput!): Coordinate
  coordinates(where: CoordinateWhereInput, orderBy: CoordinateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Coordinate]!
  coordinatesConnection(where: CoordinateWhereInput, orderBy: CoordinateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CoordinateConnection!
  manualContact(where: ManualContactWhereUniqueInput!): ManualContact
  manualContacts(where: ManualContactWhereInput, orderBy: ManualContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ManualContact]!
  manualContactsConnection(where: ManualContactWhereInput, orderBy: ManualContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ManualContactConnection!
  profileField(where: ProfileFieldWhereUniqueInput!): ProfileField
  profileFields(where: ProfileFieldWhereInput, orderBy: ProfileFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProfileField]!
  profileFieldsConnection(where: ProfileFieldWhereInput, orderBy: ProfileFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileFieldConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  conference(where: ConferenceSubscriptionWhereInput): ConferenceSubscriptionPayload
  connection(where: ConnectionSubscriptionWhereInput): ConnectionSubscriptionPayload
  coordinate(where: CoordinateSubscriptionWhereInput): CoordinateSubscriptionPayload
  manualContact(where: ManualContactSubscriptionWhereInput): ManualContactSubscriptionPayload
  profileField(where: ProfileFieldSubscriptionWhereInput): ProfileFieldSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  profile(where: ProfileFieldWhereInput, orderBy: ProfileFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProfileField!]
  sent_requests(where: ConnectionWhereInput, orderBy: ConnectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Connection!]
  received_requests(where: ConnectionWhereInput, orderBy: ConnectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Connection!]
  manualContacts(where: ManualContactWhereInput, orderBy: ManualContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ManualContact!]
  conferences(where: ConferenceWhereInput, orderBy: ConferenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Conference!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  profile: ProfileFieldCreateManyWithoutUserInput
  sent_requests: ConnectionCreateManyWithoutSenderInput
  received_requests: ConnectionCreateManyWithoutRecipientInput
  manualContacts: ManualContactCreateManyInput
  conferences: ConferenceCreateManyWithoutAttendeesInput
}

input UserCreateManyWithoutConferencesInput {
  create: [UserCreateWithoutConferencesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReceived_requestsInput {
  create: UserCreateWithoutReceived_requestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSent_requestsInput {
  create: UserCreateWithoutSent_requestsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutConferencesInput {
  id: ID
  name: String!
  profile: ProfileFieldCreateManyWithoutUserInput
  sent_requests: ConnectionCreateManyWithoutSenderInput
  received_requests: ConnectionCreateManyWithoutRecipientInput
  manualContacts: ManualContactCreateManyInput
}

input UserCreateWithoutProfileInput {
  id: ID
  name: String!
  sent_requests: ConnectionCreateManyWithoutSenderInput
  received_requests: ConnectionCreateManyWithoutRecipientInput
  manualContacts: ManualContactCreateManyInput
  conferences: ConferenceCreateManyWithoutAttendeesInput
}

input UserCreateWithoutReceived_requestsInput {
  id: ID
  name: String!
  profile: ProfileFieldCreateManyWithoutUserInput
  sent_requests: ConnectionCreateManyWithoutSenderInput
  manualContacts: ManualContactCreateManyInput
  conferences: ConferenceCreateManyWithoutAttendeesInput
}

input UserCreateWithoutSent_requestsInput {
  id: ID
  name: String!
  profile: ProfileFieldCreateManyWithoutUserInput
  received_requests: ConnectionCreateManyWithoutRecipientInput
  manualContacts: ManualContactCreateManyInput
  conferences: ConferenceCreateManyWithoutAttendeesInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  profile: ProfileFieldUpdateManyWithoutUserInput
  sent_requests: ConnectionUpdateManyWithoutSenderInput
  received_requests: ConnectionUpdateManyWithoutRecipientInput
  manualContacts: ManualContactUpdateManyInput
  conferences: ConferenceUpdateManyWithoutAttendeesInput
}

input UserUpdateManyDataInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserUpdateManyWithoutConferencesInput {
  create: [UserCreateWithoutConferencesInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutConferencesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutConferencesInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  update: UserUpdateWithoutProfileDataInput
  upsert: UserUpsertWithoutProfileInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutReceived_requestsInput {
  create: UserCreateWithoutReceived_requestsInput
  update: UserUpdateWithoutReceived_requestsDataInput
  upsert: UserUpsertWithoutReceived_requestsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutSent_requestsInput {
  create: UserCreateWithoutSent_requestsInput
  update: UserUpdateWithoutSent_requestsDataInput
  upsert: UserUpsertWithoutSent_requestsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutConferencesDataInput {
  name: String
  profile: ProfileFieldUpdateManyWithoutUserInput
  sent_requests: ConnectionUpdateManyWithoutSenderInput
  received_requests: ConnectionUpdateManyWithoutRecipientInput
  manualContacts: ManualContactUpdateManyInput
}

input UserUpdateWithoutProfileDataInput {
  name: String
  sent_requests: ConnectionUpdateManyWithoutSenderInput
  received_requests: ConnectionUpdateManyWithoutRecipientInput
  manualContacts: ManualContactUpdateManyInput
  conferences: ConferenceUpdateManyWithoutAttendeesInput
}

input UserUpdateWithoutReceived_requestsDataInput {
  name: String
  profile: ProfileFieldUpdateManyWithoutUserInput
  sent_requests: ConnectionUpdateManyWithoutSenderInput
  manualContacts: ManualContactUpdateManyInput
  conferences: ConferenceUpdateManyWithoutAttendeesInput
}

input UserUpdateWithoutSent_requestsDataInput {
  name: String
  profile: ProfileFieldUpdateManyWithoutUserInput
  received_requests: ConnectionUpdateManyWithoutRecipientInput
  manualContacts: ManualContactUpdateManyInput
  conferences: ConferenceUpdateManyWithoutAttendeesInput
}

input UserUpdateWithWhereUniqueWithoutConferencesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutConferencesDataInput!
}

input UserUpsertWithoutProfileInput {
  update: UserUpdateWithoutProfileDataInput!
  create: UserCreateWithoutProfileInput!
}

input UserUpsertWithoutReceived_requestsInput {
  update: UserUpdateWithoutReceived_requestsDataInput!
  create: UserCreateWithoutReceived_requestsInput!
}

input UserUpsertWithoutSent_requestsInput {
  update: UserUpdateWithoutSent_requestsDataInput!
  create: UserCreateWithoutSent_requestsInput!
}

input UserUpsertWithWhereUniqueWithoutConferencesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutConferencesDataInput!
  create: UserCreateWithoutConferencesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  profile_every: ProfileFieldWhereInput
  profile_some: ProfileFieldWhereInput
  profile_none: ProfileFieldWhereInput
  sent_requests_every: ConnectionWhereInput
  sent_requests_some: ConnectionWhereInput
  sent_requests_none: ConnectionWhereInput
  received_requests_every: ConnectionWhereInput
  received_requests_some: ConnectionWhereInput
  received_requests_none: ConnectionWhereInput
  manualContacts_every: ManualContactWhereInput
  manualContacts_some: ManualContactWhereInput
  manualContacts_none: ManualContactWhereInput
  conferences_every: ConferenceWhereInput
  conferences_some: ConferenceWhereInput
  conferences_none: ConferenceWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    