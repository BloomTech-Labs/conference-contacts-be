// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  connection: (where?: ConnectionWhereInput) => Promise<boolean>;
  notification: (where?: NotificationWhereInput) => Promise<boolean>;
  profileField: (where?: ProfileFieldWhereInput) => Promise<boolean>;
  qRCode: (where?: QRCodeWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  connection: (where: ConnectionWhereUniqueInput) => ConnectionNullablePromise;
  connections: (args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Connection>;
  connectionsConnection: (args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ConnectionConnectionPromise;
  notification: (
    where: NotificationWhereUniqueInput
  ) => NotificationNullablePromise;
  notifications: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Notification>;
  notificationsConnection: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NotificationConnectionPromise;
  profileField: (
    where: ProfileFieldWhereUniqueInput
  ) => ProfileFieldNullablePromise;
  profileFields: (args?: {
    where?: ProfileFieldWhereInput;
    orderBy?: ProfileFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ProfileField>;
  profileFieldsConnection: (args?: {
    where?: ProfileFieldWhereInput;
    orderBy?: ProfileFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProfileFieldConnectionPromise;
  qRCode: (where: QRCodeWhereUniqueInput) => QRCodeNullablePromise;
  qRCodes: (args?: {
    where?: QRCodeWhereInput;
    orderBy?: QRCodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<QRCode>;
  qRCodesConnection: (args?: {
    where?: QRCodeWhereInput;
    orderBy?: QRCodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QRCodeConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createConnection: (data: ConnectionCreateInput) => ConnectionPromise;
  updateConnection: (args: {
    data: ConnectionUpdateInput;
    where: ConnectionWhereUniqueInput;
  }) => ConnectionPromise;
  updateManyConnections: (args: {
    data: ConnectionUpdateManyMutationInput;
    where?: ConnectionWhereInput;
  }) => BatchPayloadPromise;
  upsertConnection: (args: {
    where: ConnectionWhereUniqueInput;
    create: ConnectionCreateInput;
    update: ConnectionUpdateInput;
  }) => ConnectionPromise;
  deleteConnection: (where: ConnectionWhereUniqueInput) => ConnectionPromise;
  deleteManyConnections: (where?: ConnectionWhereInput) => BatchPayloadPromise;
  createNotification: (data: NotificationCreateInput) => NotificationPromise;
  updateNotification: (args: {
    data: NotificationUpdateInput;
    where: NotificationWhereUniqueInput;
  }) => NotificationPromise;
  updateManyNotifications: (args: {
    data: NotificationUpdateManyMutationInput;
    where?: NotificationWhereInput;
  }) => BatchPayloadPromise;
  upsertNotification: (args: {
    where: NotificationWhereUniqueInput;
    create: NotificationCreateInput;
    update: NotificationUpdateInput;
  }) => NotificationPromise;
  deleteNotification: (
    where: NotificationWhereUniqueInput
  ) => NotificationPromise;
  deleteManyNotifications: (
    where?: NotificationWhereInput
  ) => BatchPayloadPromise;
  createProfileField: (data: ProfileFieldCreateInput) => ProfileFieldPromise;
  updateProfileField: (args: {
    data: ProfileFieldUpdateInput;
    where: ProfileFieldWhereUniqueInput;
  }) => ProfileFieldPromise;
  updateManyProfileFields: (args: {
    data: ProfileFieldUpdateManyMutationInput;
    where?: ProfileFieldWhereInput;
  }) => BatchPayloadPromise;
  upsertProfileField: (args: {
    where: ProfileFieldWhereUniqueInput;
    create: ProfileFieldCreateInput;
    update: ProfileFieldUpdateInput;
  }) => ProfileFieldPromise;
  deleteProfileField: (
    where: ProfileFieldWhereUniqueInput
  ) => ProfileFieldPromise;
  deleteManyProfileFields: (
    where?: ProfileFieldWhereInput
  ) => BatchPayloadPromise;
  createQRCode: (data: QRCodeCreateInput) => QRCodePromise;
  updateQRCode: (args: {
    data: QRCodeUpdateInput;
    where: QRCodeWhereUniqueInput;
  }) => QRCodePromise;
  updateManyQRCodes: (args: {
    data: QRCodeUpdateManyMutationInput;
    where?: QRCodeWhereInput;
  }) => BatchPayloadPromise;
  upsertQRCode: (args: {
    where: QRCodeWhereUniqueInput;
    create: QRCodeCreateInput;
    update: QRCodeUpdateInput;
  }) => QRCodePromise;
  deleteQRCode: (where: QRCodeWhereUniqueInput) => QRCodePromise;
  deleteManyQRCodes: (where?: QRCodeWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  connection: (
    where?: ConnectionSubscriptionWhereInput
  ) => ConnectionSubscriptionPayloadSubscription;
  notification: (
    where?: NotificationSubscriptionWhereInput
  ) => NotificationSubscriptionPayloadSubscription;
  profileField: (
    where?: ProfileFieldSubscriptionWhereInput
  ) => ProfileFieldSubscriptionPayloadSubscription;
  qRCode: (
    where?: QRCodeSubscriptionWhereInput
  ) => QRCodeSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ConnectionStatus = "PENDING" | "CONNECTED";

export type ProfileFieldType =
  | "EMAIL"
  | "PHONE"
  | "SMS"
  | "INSTAGRAM"
  | "FACEBOOK"
  | "LINKEDIN"
  | "TWITTER";

export type ProfileFieldPrivacy = "PUBLIC" | "PRIVATE" | "CONNECTED";

export type ProfileFieldOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "type_ASC"
  | "type_DESC"
  | "privacy_ASC"
  | "privacy_DESC"
  | "preferredContact_ASC"
  | "preferredContact_DESC";

export type QRCodeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "label_ASC"
  | "label_DESC"
  | "scans_ASC"
  | "scans_DESC";

export type ConnectionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "senderLat_ASC"
  | "senderLat_DESC"
  | "senderLon_ASC"
  | "senderLon_DESC"
  | "receiverLat_ASC"
  | "receiverLat_DESC"
  | "receiverLon_ASC"
  | "receiverLon_DESC"
  | "location_ASC"
  | "location_DESC"
  | "senderNote_ASC"
  | "senderNote_DESC"
  | "receiverNote_ASC"
  | "receiverNote_DESC"
  | "senderEvent_ASC"
  | "senderEvent_DESC"
  | "receiverEvent_ASC"
  | "receiverEvent_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NotificationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "message_ASC"
  | "message_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "authId_ASC"
  | "authId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "picture_ASC"
  | "picture_DESC"
  | "birthdate_ASC"
  | "birthdate_DESC"
  | "location_ASC"
  | "location_DESC"
  | "industry_ASC"
  | "industry_DESC"
  | "jobtitle_ASC"
  | "jobtitle_DESC"
  | "tagline_ASC"
  | "tagline_DESC"
  | "bio_ASC"
  | "bio_DESC"
  | "username_ASC"
  | "username_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ConnectionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProfileFieldWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  type?: Maybe<ProfileFieldType>;
  type_not?: Maybe<ProfileFieldType>;
  type_in?: Maybe<ProfileFieldType[] | ProfileFieldType>;
  type_not_in?: Maybe<ProfileFieldType[] | ProfileFieldType>;
  privacy?: Maybe<ProfileFieldPrivacy>;
  privacy_not?: Maybe<ProfileFieldPrivacy>;
  privacy_in?: Maybe<ProfileFieldPrivacy[] | ProfileFieldPrivacy>;
  privacy_not_in?: Maybe<ProfileFieldPrivacy[] | ProfileFieldPrivacy>;
  preferredContact?: Maybe<Boolean>;
  preferredContact_not?: Maybe<Boolean>;
  AND?: Maybe<ProfileFieldWhereInput[] | ProfileFieldWhereInput>;
  OR?: Maybe<ProfileFieldWhereInput[] | ProfileFieldWhereInput>;
  NOT?: Maybe<ProfileFieldWhereInput[] | ProfileFieldWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  authId?: Maybe<String>;
  authId_not?: Maybe<String>;
  authId_in?: Maybe<String[] | String>;
  authId_not_in?: Maybe<String[] | String>;
  authId_lt?: Maybe<String>;
  authId_lte?: Maybe<String>;
  authId_gt?: Maybe<String>;
  authId_gte?: Maybe<String>;
  authId_contains?: Maybe<String>;
  authId_not_contains?: Maybe<String>;
  authId_starts_with?: Maybe<String>;
  authId_not_starts_with?: Maybe<String>;
  authId_ends_with?: Maybe<String>;
  authId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  picture?: Maybe<String>;
  picture_not?: Maybe<String>;
  picture_in?: Maybe<String[] | String>;
  picture_not_in?: Maybe<String[] | String>;
  picture_lt?: Maybe<String>;
  picture_lte?: Maybe<String>;
  picture_gt?: Maybe<String>;
  picture_gte?: Maybe<String>;
  picture_contains?: Maybe<String>;
  picture_not_contains?: Maybe<String>;
  picture_starts_with?: Maybe<String>;
  picture_not_starts_with?: Maybe<String>;
  picture_ends_with?: Maybe<String>;
  picture_not_ends_with?: Maybe<String>;
  birthdate?: Maybe<String>;
  birthdate_not?: Maybe<String>;
  birthdate_in?: Maybe<String[] | String>;
  birthdate_not_in?: Maybe<String[] | String>;
  birthdate_lt?: Maybe<String>;
  birthdate_lte?: Maybe<String>;
  birthdate_gt?: Maybe<String>;
  birthdate_gte?: Maybe<String>;
  birthdate_contains?: Maybe<String>;
  birthdate_not_contains?: Maybe<String>;
  birthdate_starts_with?: Maybe<String>;
  birthdate_not_starts_with?: Maybe<String>;
  birthdate_ends_with?: Maybe<String>;
  birthdate_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  industry?: Maybe<String>;
  industry_not?: Maybe<String>;
  industry_in?: Maybe<String[] | String>;
  industry_not_in?: Maybe<String[] | String>;
  industry_lt?: Maybe<String>;
  industry_lte?: Maybe<String>;
  industry_gt?: Maybe<String>;
  industry_gte?: Maybe<String>;
  industry_contains?: Maybe<String>;
  industry_not_contains?: Maybe<String>;
  industry_starts_with?: Maybe<String>;
  industry_not_starts_with?: Maybe<String>;
  industry_ends_with?: Maybe<String>;
  industry_not_ends_with?: Maybe<String>;
  jobtitle?: Maybe<String>;
  jobtitle_not?: Maybe<String>;
  jobtitle_in?: Maybe<String[] | String>;
  jobtitle_not_in?: Maybe<String[] | String>;
  jobtitle_lt?: Maybe<String>;
  jobtitle_lte?: Maybe<String>;
  jobtitle_gt?: Maybe<String>;
  jobtitle_gte?: Maybe<String>;
  jobtitle_contains?: Maybe<String>;
  jobtitle_not_contains?: Maybe<String>;
  jobtitle_starts_with?: Maybe<String>;
  jobtitle_not_starts_with?: Maybe<String>;
  jobtitle_ends_with?: Maybe<String>;
  jobtitle_not_ends_with?: Maybe<String>;
  tagline?: Maybe<String>;
  tagline_not?: Maybe<String>;
  tagline_in?: Maybe<String[] | String>;
  tagline_not_in?: Maybe<String[] | String>;
  tagline_lt?: Maybe<String>;
  tagline_lte?: Maybe<String>;
  tagline_gt?: Maybe<String>;
  tagline_gte?: Maybe<String>;
  tagline_contains?: Maybe<String>;
  tagline_not_contains?: Maybe<String>;
  tagline_starts_with?: Maybe<String>;
  tagline_not_starts_with?: Maybe<String>;
  tagline_ends_with?: Maybe<String>;
  tagline_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  profile_every?: Maybe<ProfileFieldWhereInput>;
  profile_some?: Maybe<ProfileFieldWhereInput>;
  profile_none?: Maybe<ProfileFieldWhereInput>;
  qrcodes_every?: Maybe<QRCodeWhereInput>;
  qrcodes_some?: Maybe<QRCodeWhereInput>;
  qrcodes_none?: Maybe<QRCodeWhereInput>;
  sentConnections_every?: Maybe<ConnectionWhereInput>;
  sentConnections_some?: Maybe<ConnectionWhereInput>;
  sentConnections_none?: Maybe<ConnectionWhereInput>;
  receivedConnections_every?: Maybe<ConnectionWhereInput>;
  receivedConnections_some?: Maybe<ConnectionWhereInput>;
  receivedConnections_none?: Maybe<ConnectionWhereInput>;
  blockedConnections_every?: Maybe<ConnectionWhereInput>;
  blockedConnections_some?: Maybe<ConnectionWhereInput>;
  blockedConnections_none?: Maybe<ConnectionWhereInput>;
  notifications_every?: Maybe<NotificationWhereInput>;
  notifications_some?: Maybe<NotificationWhereInput>;
  notifications_none?: Maybe<NotificationWhereInput>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface QRCodeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  label?: Maybe<String>;
  label_not?: Maybe<String>;
  label_in?: Maybe<String[] | String>;
  label_not_in?: Maybe<String[] | String>;
  label_lt?: Maybe<String>;
  label_lte?: Maybe<String>;
  label_gt?: Maybe<String>;
  label_gte?: Maybe<String>;
  label_contains?: Maybe<String>;
  label_not_contains?: Maybe<String>;
  label_starts_with?: Maybe<String>;
  label_not_starts_with?: Maybe<String>;
  label_ends_with?: Maybe<String>;
  label_not_ends_with?: Maybe<String>;
  scans?: Maybe<Int>;
  scans_not?: Maybe<Int>;
  scans_in?: Maybe<Int[] | Int>;
  scans_not_in?: Maybe<Int[] | Int>;
  scans_lt?: Maybe<Int>;
  scans_lte?: Maybe<Int>;
  scans_gt?: Maybe<Int>;
  scans_gte?: Maybe<Int>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<QRCodeWhereInput[] | QRCodeWhereInput>;
  OR?: Maybe<QRCodeWhereInput[] | QRCodeWhereInput>;
  NOT?: Maybe<QRCodeWhereInput[] | QRCodeWhereInput>;
}

export interface ConnectionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sender?: Maybe<UserWhereInput>;
  receiver?: Maybe<UserWhereInput>;
  blocker?: Maybe<UserWhereInput>;
  status?: Maybe<ConnectionStatus>;
  status_not?: Maybe<ConnectionStatus>;
  status_in?: Maybe<ConnectionStatus[] | ConnectionStatus>;
  status_not_in?: Maybe<ConnectionStatus[] | ConnectionStatus>;
  senderLat?: Maybe<Float>;
  senderLat_not?: Maybe<Float>;
  senderLat_in?: Maybe<Float[] | Float>;
  senderLat_not_in?: Maybe<Float[] | Float>;
  senderLat_lt?: Maybe<Float>;
  senderLat_lte?: Maybe<Float>;
  senderLat_gt?: Maybe<Float>;
  senderLat_gte?: Maybe<Float>;
  senderLon?: Maybe<Float>;
  senderLon_not?: Maybe<Float>;
  senderLon_in?: Maybe<Float[] | Float>;
  senderLon_not_in?: Maybe<Float[] | Float>;
  senderLon_lt?: Maybe<Float>;
  senderLon_lte?: Maybe<Float>;
  senderLon_gt?: Maybe<Float>;
  senderLon_gte?: Maybe<Float>;
  receiverLat?: Maybe<Float>;
  receiverLat_not?: Maybe<Float>;
  receiverLat_in?: Maybe<Float[] | Float>;
  receiverLat_not_in?: Maybe<Float[] | Float>;
  receiverLat_lt?: Maybe<Float>;
  receiverLat_lte?: Maybe<Float>;
  receiverLat_gt?: Maybe<Float>;
  receiverLat_gte?: Maybe<Float>;
  receiverLon?: Maybe<Float>;
  receiverLon_not?: Maybe<Float>;
  receiverLon_in?: Maybe<Float[] | Float>;
  receiverLon_not_in?: Maybe<Float[] | Float>;
  receiverLon_lt?: Maybe<Float>;
  receiverLon_lte?: Maybe<Float>;
  receiverLon_gt?: Maybe<Float>;
  receiverLon_gte?: Maybe<Float>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  senderNote?: Maybe<String>;
  senderNote_not?: Maybe<String>;
  senderNote_in?: Maybe<String[] | String>;
  senderNote_not_in?: Maybe<String[] | String>;
  senderNote_lt?: Maybe<String>;
  senderNote_lte?: Maybe<String>;
  senderNote_gt?: Maybe<String>;
  senderNote_gte?: Maybe<String>;
  senderNote_contains?: Maybe<String>;
  senderNote_not_contains?: Maybe<String>;
  senderNote_starts_with?: Maybe<String>;
  senderNote_not_starts_with?: Maybe<String>;
  senderNote_ends_with?: Maybe<String>;
  senderNote_not_ends_with?: Maybe<String>;
  receiverNote?: Maybe<String>;
  receiverNote_not?: Maybe<String>;
  receiverNote_in?: Maybe<String[] | String>;
  receiverNote_not_in?: Maybe<String[] | String>;
  receiverNote_lt?: Maybe<String>;
  receiverNote_lte?: Maybe<String>;
  receiverNote_gt?: Maybe<String>;
  receiverNote_gte?: Maybe<String>;
  receiverNote_contains?: Maybe<String>;
  receiverNote_not_contains?: Maybe<String>;
  receiverNote_starts_with?: Maybe<String>;
  receiverNote_not_starts_with?: Maybe<String>;
  receiverNote_ends_with?: Maybe<String>;
  receiverNote_not_ends_with?: Maybe<String>;
  senderEvent?: Maybe<String>;
  senderEvent_not?: Maybe<String>;
  senderEvent_in?: Maybe<String[] | String>;
  senderEvent_not_in?: Maybe<String[] | String>;
  senderEvent_lt?: Maybe<String>;
  senderEvent_lte?: Maybe<String>;
  senderEvent_gt?: Maybe<String>;
  senderEvent_gte?: Maybe<String>;
  senderEvent_contains?: Maybe<String>;
  senderEvent_not_contains?: Maybe<String>;
  senderEvent_starts_with?: Maybe<String>;
  senderEvent_not_starts_with?: Maybe<String>;
  senderEvent_ends_with?: Maybe<String>;
  senderEvent_not_ends_with?: Maybe<String>;
  receiverEvent?: Maybe<String>;
  receiverEvent_not?: Maybe<String>;
  receiverEvent_in?: Maybe<String[] | String>;
  receiverEvent_not_in?: Maybe<String[] | String>;
  receiverEvent_lt?: Maybe<String>;
  receiverEvent_lte?: Maybe<String>;
  receiverEvent_gt?: Maybe<String>;
  receiverEvent_gte?: Maybe<String>;
  receiverEvent_contains?: Maybe<String>;
  receiverEvent_not_contains?: Maybe<String>;
  receiverEvent_starts_with?: Maybe<String>;
  receiverEvent_not_starts_with?: Maybe<String>;
  receiverEvent_ends_with?: Maybe<String>;
  receiverEvent_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ConnectionWhereInput[] | ConnectionWhereInput>;
  OR?: Maybe<ConnectionWhereInput[] | ConnectionWhereInput>;
  NOT?: Maybe<ConnectionWhereInput[] | ConnectionWhereInput>;
}

export interface NotificationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  OR?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  NOT?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
}

export type NotificationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProfileFieldWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type QRCodeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  authId?: Maybe<String>;
}>;

export interface ConnectionCreateInput {
  id?: Maybe<ID_Input>;
  sender?: Maybe<UserCreateOneWithoutSentConnectionsInput>;
  receiver?: Maybe<UserCreateOneWithoutReceivedConnectionsInput>;
  blocker?: Maybe<UserCreateOneWithoutBlockedConnectionsInput>;
  status?: Maybe<ConnectionStatus>;
  senderLat?: Maybe<Float>;
  senderLon?: Maybe<Float>;
  receiverLat?: Maybe<Float>;
  receiverLon?: Maybe<Float>;
  location?: Maybe<String>;
  senderNote?: Maybe<String>;
  receiverNote?: Maybe<String>;
  senderEvent?: Maybe<String>;
  receiverEvent?: Maybe<String>;
}

export interface UserCreateOneWithoutSentConnectionsInput {
  create?: Maybe<UserCreateWithoutSentConnectionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutSentConnectionsInput {
  id?: Maybe<ID_Input>;
  authId: String;
  name?: Maybe<String>;
  picture?: Maybe<String>;
  birthdate?: Maybe<String>;
  location?: Maybe<String>;
  industry?: Maybe<String>;
  jobtitle?: Maybe<String>;
  tagline?: Maybe<String>;
  bio?: Maybe<String>;
  profile?: Maybe<ProfileFieldCreateManyWithoutUserInput>;
  qrcodes?: Maybe<QRCodeCreateManyWithoutUserInput>;
  receivedConnections?: Maybe<ConnectionCreateManyWithoutReceiverInput>;
  blockedConnections?: Maybe<ConnectionCreateManyWithoutBlockerInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  username?: Maybe<String>;
}

export interface ProfileFieldCreateManyWithoutUserInput {
  create?: Maybe<
    ProfileFieldCreateWithoutUserInput[] | ProfileFieldCreateWithoutUserInput
  >;
  connect?: Maybe<
    ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput
  >;
}

export interface ProfileFieldCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  value: String;
  type: ProfileFieldType;
  privacy: ProfileFieldPrivacy;
  preferredContact?: Maybe<Boolean>;
}

export interface QRCodeCreateManyWithoutUserInput {
  create?: Maybe<QRCodeCreateWithoutUserInput[] | QRCodeCreateWithoutUserInput>;
  connect?: Maybe<QRCodeWhereUniqueInput[] | QRCodeWhereUniqueInput>;
}

export interface QRCodeCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  label?: Maybe<String>;
  scans?: Maybe<Int>;
}

export interface ConnectionCreateManyWithoutReceiverInput {
  create?: Maybe<
    | ConnectionCreateWithoutReceiverInput[]
    | ConnectionCreateWithoutReceiverInput
  >;
  connect?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
}

export interface ConnectionCreateWithoutReceiverInput {
  id?: Maybe<ID_Input>;
  sender?: Maybe<UserCreateOneWithoutSentConnectionsInput>;
  blocker?: Maybe<UserCreateOneWithoutBlockedConnectionsInput>;
  status?: Maybe<ConnectionStatus>;
  senderLat?: Maybe<Float>;
  senderLon?: Maybe<Float>;
  receiverLat?: Maybe<Float>;
  receiverLon?: Maybe<Float>;
  location?: Maybe<String>;
  senderNote?: Maybe<String>;
  receiverNote?: Maybe<String>;
  senderEvent?: Maybe<String>;
  receiverEvent?: Maybe<String>;
}

export interface UserCreateOneWithoutBlockedConnectionsInput {
  create?: Maybe<UserCreateWithoutBlockedConnectionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutBlockedConnectionsInput {
  id?: Maybe<ID_Input>;
  authId: String;
  name?: Maybe<String>;
  picture?: Maybe<String>;
  birthdate?: Maybe<String>;
  location?: Maybe<String>;
  industry?: Maybe<String>;
  jobtitle?: Maybe<String>;
  tagline?: Maybe<String>;
  bio?: Maybe<String>;
  profile?: Maybe<ProfileFieldCreateManyWithoutUserInput>;
  qrcodes?: Maybe<QRCodeCreateManyWithoutUserInput>;
  sentConnections?: Maybe<ConnectionCreateManyWithoutSenderInput>;
  receivedConnections?: Maybe<ConnectionCreateManyWithoutReceiverInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  username?: Maybe<String>;
}

export interface ConnectionCreateManyWithoutSenderInput {
  create?: Maybe<
    ConnectionCreateWithoutSenderInput[] | ConnectionCreateWithoutSenderInput
  >;
  connect?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
}

export interface ConnectionCreateWithoutSenderInput {
  id?: Maybe<ID_Input>;
  receiver?: Maybe<UserCreateOneWithoutReceivedConnectionsInput>;
  blocker?: Maybe<UserCreateOneWithoutBlockedConnectionsInput>;
  status?: Maybe<ConnectionStatus>;
  senderLat?: Maybe<Float>;
  senderLon?: Maybe<Float>;
  receiverLat?: Maybe<Float>;
  receiverLon?: Maybe<Float>;
  location?: Maybe<String>;
  senderNote?: Maybe<String>;
  receiverNote?: Maybe<String>;
  senderEvent?: Maybe<String>;
  receiverEvent?: Maybe<String>;
}

export interface UserCreateOneWithoutReceivedConnectionsInput {
  create?: Maybe<UserCreateWithoutReceivedConnectionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutReceivedConnectionsInput {
  id?: Maybe<ID_Input>;
  authId: String;
  name?: Maybe<String>;
  picture?: Maybe<String>;
  birthdate?: Maybe<String>;
  location?: Maybe<String>;
  industry?: Maybe<String>;
  jobtitle?: Maybe<String>;
  tagline?: Maybe<String>;
  bio?: Maybe<String>;
  profile?: Maybe<ProfileFieldCreateManyWithoutUserInput>;
  qrcodes?: Maybe<QRCodeCreateManyWithoutUserInput>;
  sentConnections?: Maybe<ConnectionCreateManyWithoutSenderInput>;
  blockedConnections?: Maybe<ConnectionCreateManyWithoutBlockerInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  username?: Maybe<String>;
}

export interface ConnectionCreateManyWithoutBlockerInput {
  create?: Maybe<
    ConnectionCreateWithoutBlockerInput[] | ConnectionCreateWithoutBlockerInput
  >;
  connect?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
}

export interface ConnectionCreateWithoutBlockerInput {
  id?: Maybe<ID_Input>;
  sender?: Maybe<UserCreateOneWithoutSentConnectionsInput>;
  receiver?: Maybe<UserCreateOneWithoutReceivedConnectionsInput>;
  status?: Maybe<ConnectionStatus>;
  senderLat?: Maybe<Float>;
  senderLon?: Maybe<Float>;
  receiverLat?: Maybe<Float>;
  receiverLon?: Maybe<Float>;
  location?: Maybe<String>;
  senderNote?: Maybe<String>;
  receiverNote?: Maybe<String>;
  senderEvent?: Maybe<String>;
  receiverEvent?: Maybe<String>;
}

export interface NotificationCreateManyWithoutUserInput {
  create?: Maybe<
    NotificationCreateWithoutUserInput[] | NotificationCreateWithoutUserInput
  >;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
}

export interface NotificationCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  message: String;
}

export interface ConnectionUpdateInput {
  sender?: Maybe<UserUpdateOneWithoutSentConnectionsInput>;
  receiver?: Maybe<UserUpdateOneWithoutReceivedConnectionsInput>;
  blocker?: Maybe<UserUpdateOneWithoutBlockedConnectionsInput>;
  status?: Maybe<ConnectionStatus>;
  senderLat?: Maybe<Float>;
  senderLon?: Maybe<Float>;
  receiverLat?: Maybe<Float>;
  receiverLon?: Maybe<Float>;
  location?: Maybe<String>;
  senderNote?: Maybe<String>;
  receiverNote?: Maybe<String>;
  senderEvent?: Maybe<String>;
  receiverEvent?: Maybe<String>;
}

export interface UserUpdateOneWithoutSentConnectionsInput {
  create?: Maybe<UserCreateWithoutSentConnectionsInput>;
  update?: Maybe<UserUpdateWithoutSentConnectionsDataInput>;
  upsert?: Maybe<UserUpsertWithoutSentConnectionsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutSentConnectionsDataInput {
  authId?: Maybe<String>;
  name?: Maybe<String>;
  picture?: Maybe<String>;
  birthdate?: Maybe<String>;
  location?: Maybe<String>;
  industry?: Maybe<String>;
  jobtitle?: Maybe<String>;
  tagline?: Maybe<String>;
  bio?: Maybe<String>;
  profile?: Maybe<ProfileFieldUpdateManyWithoutUserInput>;
  qrcodes?: Maybe<QRCodeUpdateManyWithoutUserInput>;
  receivedConnections?: Maybe<ConnectionUpdateManyWithoutReceiverInput>;
  blockedConnections?: Maybe<ConnectionUpdateManyWithoutBlockerInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  username?: Maybe<String>;
}

export interface ProfileFieldUpdateManyWithoutUserInput {
  create?: Maybe<
    ProfileFieldCreateWithoutUserInput[] | ProfileFieldCreateWithoutUserInput
  >;
  delete?: Maybe<ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput>;
  connect?: Maybe<
    ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput
  >;
  set?: Maybe<ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput>;
  disconnect?: Maybe<
    ProfileFieldWhereUniqueInput[] | ProfileFieldWhereUniqueInput
  >;
  update?: Maybe<
    | ProfileFieldUpdateWithWhereUniqueWithoutUserInput[]
    | ProfileFieldUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ProfileFieldUpsertWithWhereUniqueWithoutUserInput[]
    | ProfileFieldUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    ProfileFieldScalarWhereInput[] | ProfileFieldScalarWhereInput
  >;
  updateMany?: Maybe<
    | ProfileFieldUpdateManyWithWhereNestedInput[]
    | ProfileFieldUpdateManyWithWhereNestedInput
  >;
}

export interface ProfileFieldUpdateWithWhereUniqueWithoutUserInput {
  where: ProfileFieldWhereUniqueInput;
  data: ProfileFieldUpdateWithoutUserDataInput;
}

export interface ProfileFieldUpdateWithoutUserDataInput {
  value?: Maybe<String>;
  type?: Maybe<ProfileFieldType>;
  privacy?: Maybe<ProfileFieldPrivacy>;
  preferredContact?: Maybe<Boolean>;
}

export interface ProfileFieldUpsertWithWhereUniqueWithoutUserInput {
  where: ProfileFieldWhereUniqueInput;
  update: ProfileFieldUpdateWithoutUserDataInput;
  create: ProfileFieldCreateWithoutUserInput;
}

export interface ProfileFieldScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  type?: Maybe<ProfileFieldType>;
  type_not?: Maybe<ProfileFieldType>;
  type_in?: Maybe<ProfileFieldType[] | ProfileFieldType>;
  type_not_in?: Maybe<ProfileFieldType[] | ProfileFieldType>;
  privacy?: Maybe<ProfileFieldPrivacy>;
  privacy_not?: Maybe<ProfileFieldPrivacy>;
  privacy_in?: Maybe<ProfileFieldPrivacy[] | ProfileFieldPrivacy>;
  privacy_not_in?: Maybe<ProfileFieldPrivacy[] | ProfileFieldPrivacy>;
  preferredContact?: Maybe<Boolean>;
  preferredContact_not?: Maybe<Boolean>;
  AND?: Maybe<ProfileFieldScalarWhereInput[] | ProfileFieldScalarWhereInput>;
  OR?: Maybe<ProfileFieldScalarWhereInput[] | ProfileFieldScalarWhereInput>;
  NOT?: Maybe<ProfileFieldScalarWhereInput[] | ProfileFieldScalarWhereInput>;
}

export interface ProfileFieldUpdateManyWithWhereNestedInput {
  where: ProfileFieldScalarWhereInput;
  data: ProfileFieldUpdateManyDataInput;
}

export interface ProfileFieldUpdateManyDataInput {
  value?: Maybe<String>;
  type?: Maybe<ProfileFieldType>;
  privacy?: Maybe<ProfileFieldPrivacy>;
  preferredContact?: Maybe<Boolean>;
}

export interface QRCodeUpdateManyWithoutUserInput {
  create?: Maybe<QRCodeCreateWithoutUserInput[] | QRCodeCreateWithoutUserInput>;
  delete?: Maybe<QRCodeWhereUniqueInput[] | QRCodeWhereUniqueInput>;
  connect?: Maybe<QRCodeWhereUniqueInput[] | QRCodeWhereUniqueInput>;
  set?: Maybe<QRCodeWhereUniqueInput[] | QRCodeWhereUniqueInput>;
  disconnect?: Maybe<QRCodeWhereUniqueInput[] | QRCodeWhereUniqueInput>;
  update?: Maybe<
    | QRCodeUpdateWithWhereUniqueWithoutUserInput[]
    | QRCodeUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | QRCodeUpsertWithWhereUniqueWithoutUserInput[]
    | QRCodeUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<QRCodeScalarWhereInput[] | QRCodeScalarWhereInput>;
  updateMany?: Maybe<
    | QRCodeUpdateManyWithWhereNestedInput[]
    | QRCodeUpdateManyWithWhereNestedInput
  >;
}

export interface QRCodeUpdateWithWhereUniqueWithoutUserInput {
  where: QRCodeWhereUniqueInput;
  data: QRCodeUpdateWithoutUserDataInput;
}

export interface QRCodeUpdateWithoutUserDataInput {
  label?: Maybe<String>;
  scans?: Maybe<Int>;
}

export interface QRCodeUpsertWithWhereUniqueWithoutUserInput {
  where: QRCodeWhereUniqueInput;
  update: QRCodeUpdateWithoutUserDataInput;
  create: QRCodeCreateWithoutUserInput;
}

export interface QRCodeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  label?: Maybe<String>;
  label_not?: Maybe<String>;
  label_in?: Maybe<String[] | String>;
  label_not_in?: Maybe<String[] | String>;
  label_lt?: Maybe<String>;
  label_lte?: Maybe<String>;
  label_gt?: Maybe<String>;
  label_gte?: Maybe<String>;
  label_contains?: Maybe<String>;
  label_not_contains?: Maybe<String>;
  label_starts_with?: Maybe<String>;
  label_not_starts_with?: Maybe<String>;
  label_ends_with?: Maybe<String>;
  label_not_ends_with?: Maybe<String>;
  scans?: Maybe<Int>;
  scans_not?: Maybe<Int>;
  scans_in?: Maybe<Int[] | Int>;
  scans_not_in?: Maybe<Int[] | Int>;
  scans_lt?: Maybe<Int>;
  scans_lte?: Maybe<Int>;
  scans_gt?: Maybe<Int>;
  scans_gte?: Maybe<Int>;
  AND?: Maybe<QRCodeScalarWhereInput[] | QRCodeScalarWhereInput>;
  OR?: Maybe<QRCodeScalarWhereInput[] | QRCodeScalarWhereInput>;
  NOT?: Maybe<QRCodeScalarWhereInput[] | QRCodeScalarWhereInput>;
}

export interface QRCodeUpdateManyWithWhereNestedInput {
  where: QRCodeScalarWhereInput;
  data: QRCodeUpdateManyDataInput;
}

export interface QRCodeUpdateManyDataInput {
  label?: Maybe<String>;
  scans?: Maybe<Int>;
}

export interface ConnectionUpdateManyWithoutReceiverInput {
  create?: Maybe<
    | ConnectionCreateWithoutReceiverInput[]
    | ConnectionCreateWithoutReceiverInput
  >;
  delete?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  connect?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  set?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  disconnect?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  update?: Maybe<
    | ConnectionUpdateWithWhereUniqueWithoutReceiverInput[]
    | ConnectionUpdateWithWhereUniqueWithoutReceiverInput
  >;
  upsert?: Maybe<
    | ConnectionUpsertWithWhereUniqueWithoutReceiverInput[]
    | ConnectionUpsertWithWhereUniqueWithoutReceiverInput
  >;
  deleteMany?: Maybe<ConnectionScalarWhereInput[] | ConnectionScalarWhereInput>;
  updateMany?: Maybe<
    | ConnectionUpdateManyWithWhereNestedInput[]
    | ConnectionUpdateManyWithWhereNestedInput
  >;
}

export interface ConnectionUpdateWithWhereUniqueWithoutReceiverInput {
  where: ConnectionWhereUniqueInput;
  data: ConnectionUpdateWithoutReceiverDataInput;
}

export interface ConnectionUpdateWithoutReceiverDataInput {
  sender?: Maybe<UserUpdateOneWithoutSentConnectionsInput>;
  blocker?: Maybe<UserUpdateOneWithoutBlockedConnectionsInput>;
  status?: Maybe<ConnectionStatus>;
  senderLat?: Maybe<Float>;
  senderLon?: Maybe<Float>;
  receiverLat?: Maybe<Float>;
  receiverLon?: Maybe<Float>;
  location?: Maybe<String>;
  senderNote?: Maybe<String>;
  receiverNote?: Maybe<String>;
  senderEvent?: Maybe<String>;
  receiverEvent?: Maybe<String>;
}

export interface UserUpdateOneWithoutBlockedConnectionsInput {
  create?: Maybe<UserCreateWithoutBlockedConnectionsInput>;
  update?: Maybe<UserUpdateWithoutBlockedConnectionsDataInput>;
  upsert?: Maybe<UserUpsertWithoutBlockedConnectionsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutBlockedConnectionsDataInput {
  authId?: Maybe<String>;
  name?: Maybe<String>;
  picture?: Maybe<String>;
  birthdate?: Maybe<String>;
  location?: Maybe<String>;
  industry?: Maybe<String>;
  jobtitle?: Maybe<String>;
  tagline?: Maybe<String>;
  bio?: Maybe<String>;
  profile?: Maybe<ProfileFieldUpdateManyWithoutUserInput>;
  qrcodes?: Maybe<QRCodeUpdateManyWithoutUserInput>;
  sentConnections?: Maybe<ConnectionUpdateManyWithoutSenderInput>;
  receivedConnections?: Maybe<ConnectionUpdateManyWithoutReceiverInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  username?: Maybe<String>;
}

export interface ConnectionUpdateManyWithoutSenderInput {
  create?: Maybe<
    ConnectionCreateWithoutSenderInput[] | ConnectionCreateWithoutSenderInput
  >;
  delete?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  connect?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  set?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  disconnect?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  update?: Maybe<
    | ConnectionUpdateWithWhereUniqueWithoutSenderInput[]
    | ConnectionUpdateWithWhereUniqueWithoutSenderInput
  >;
  upsert?: Maybe<
    | ConnectionUpsertWithWhereUniqueWithoutSenderInput[]
    | ConnectionUpsertWithWhereUniqueWithoutSenderInput
  >;
  deleteMany?: Maybe<ConnectionScalarWhereInput[] | ConnectionScalarWhereInput>;
  updateMany?: Maybe<
    | ConnectionUpdateManyWithWhereNestedInput[]
    | ConnectionUpdateManyWithWhereNestedInput
  >;
}

export interface ConnectionUpdateWithWhereUniqueWithoutSenderInput {
  where: ConnectionWhereUniqueInput;
  data: ConnectionUpdateWithoutSenderDataInput;
}

export interface ConnectionUpdateWithoutSenderDataInput {
  receiver?: Maybe<UserUpdateOneWithoutReceivedConnectionsInput>;
  blocker?: Maybe<UserUpdateOneWithoutBlockedConnectionsInput>;
  status?: Maybe<ConnectionStatus>;
  senderLat?: Maybe<Float>;
  senderLon?: Maybe<Float>;
  receiverLat?: Maybe<Float>;
  receiverLon?: Maybe<Float>;
  location?: Maybe<String>;
  senderNote?: Maybe<String>;
  receiverNote?: Maybe<String>;
  senderEvent?: Maybe<String>;
  receiverEvent?: Maybe<String>;
}

export interface UserUpdateOneWithoutReceivedConnectionsInput {
  create?: Maybe<UserCreateWithoutReceivedConnectionsInput>;
  update?: Maybe<UserUpdateWithoutReceivedConnectionsDataInput>;
  upsert?: Maybe<UserUpsertWithoutReceivedConnectionsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutReceivedConnectionsDataInput {
  authId?: Maybe<String>;
  name?: Maybe<String>;
  picture?: Maybe<String>;
  birthdate?: Maybe<String>;
  location?: Maybe<String>;
  industry?: Maybe<String>;
  jobtitle?: Maybe<String>;
  tagline?: Maybe<String>;
  bio?: Maybe<String>;
  profile?: Maybe<ProfileFieldUpdateManyWithoutUserInput>;
  qrcodes?: Maybe<QRCodeUpdateManyWithoutUserInput>;
  sentConnections?: Maybe<ConnectionUpdateManyWithoutSenderInput>;
  blockedConnections?: Maybe<ConnectionUpdateManyWithoutBlockerInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  username?: Maybe<String>;
}

export interface ConnectionUpdateManyWithoutBlockerInput {
  create?: Maybe<
    ConnectionCreateWithoutBlockerInput[] | ConnectionCreateWithoutBlockerInput
  >;
  delete?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  connect?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  set?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  disconnect?: Maybe<ConnectionWhereUniqueInput[] | ConnectionWhereUniqueInput>;
  update?: Maybe<
    | ConnectionUpdateWithWhereUniqueWithoutBlockerInput[]
    | ConnectionUpdateWithWhereUniqueWithoutBlockerInput
  >;
  upsert?: Maybe<
    | ConnectionUpsertWithWhereUniqueWithoutBlockerInput[]
    | ConnectionUpsertWithWhereUniqueWithoutBlockerInput
  >;
  deleteMany?: Maybe<ConnectionScalarWhereInput[] | ConnectionScalarWhereInput>;
  updateMany?: Maybe<
    | ConnectionUpdateManyWithWhereNestedInput[]
    | ConnectionUpdateManyWithWhereNestedInput
  >;
}

export interface ConnectionUpdateWithWhereUniqueWithoutBlockerInput {
  where: ConnectionWhereUniqueInput;
  data: ConnectionUpdateWithoutBlockerDataInput;
}

export interface ConnectionUpdateWithoutBlockerDataInput {
  sender?: Maybe<UserUpdateOneWithoutSentConnectionsInput>;
  receiver?: Maybe<UserUpdateOneWithoutReceivedConnectionsInput>;
  status?: Maybe<ConnectionStatus>;
  senderLat?: Maybe<Float>;
  senderLon?: Maybe<Float>;
  receiverLat?: Maybe<Float>;
  receiverLon?: Maybe<Float>;
  location?: Maybe<String>;
  senderNote?: Maybe<String>;
  receiverNote?: Maybe<String>;
  senderEvent?: Maybe<String>;
  receiverEvent?: Maybe<String>;
}

export interface ConnectionUpsertWithWhereUniqueWithoutBlockerInput {
  where: ConnectionWhereUniqueInput;
  update: ConnectionUpdateWithoutBlockerDataInput;
  create: ConnectionCreateWithoutBlockerInput;
}

export interface ConnectionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  status?: Maybe<ConnectionStatus>;
  status_not?: Maybe<ConnectionStatus>;
  status_in?: Maybe<ConnectionStatus[] | ConnectionStatus>;
  status_not_in?: Maybe<ConnectionStatus[] | ConnectionStatus>;
  senderLat?: Maybe<Float>;
  senderLat_not?: Maybe<Float>;
  senderLat_in?: Maybe<Float[] | Float>;
  senderLat_not_in?: Maybe<Float[] | Float>;
  senderLat_lt?: Maybe<Float>;
  senderLat_lte?: Maybe<Float>;
  senderLat_gt?: Maybe<Float>;
  senderLat_gte?: Maybe<Float>;
  senderLon?: Maybe<Float>;
  senderLon_not?: Maybe<Float>;
  senderLon_in?: Maybe<Float[] | Float>;
  senderLon_not_in?: Maybe<Float[] | Float>;
  senderLon_lt?: Maybe<Float>;
  senderLon_lte?: Maybe<Float>;
  senderLon_gt?: Maybe<Float>;
  senderLon_gte?: Maybe<Float>;
  receiverLat?: Maybe<Float>;
  receiverLat_not?: Maybe<Float>;
  receiverLat_in?: Maybe<Float[] | Float>;
  receiverLat_not_in?: Maybe<Float[] | Float>;
  receiverLat_lt?: Maybe<Float>;
  receiverLat_lte?: Maybe<Float>;
  receiverLat_gt?: Maybe<Float>;
  receiverLat_gte?: Maybe<Float>;
  receiverLon?: Maybe<Float>;
  receiverLon_not?: Maybe<Float>;
  receiverLon_in?: Maybe<Float[] | Float>;
  receiverLon_not_in?: Maybe<Float[] | Float>;
  receiverLon_lt?: Maybe<Float>;
  receiverLon_lte?: Maybe<Float>;
  receiverLon_gt?: Maybe<Float>;
  receiverLon_gte?: Maybe<Float>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  senderNote?: Maybe<String>;
  senderNote_not?: Maybe<String>;
  senderNote_in?: Maybe<String[] | String>;
  senderNote_not_in?: Maybe<String[] | String>;
  senderNote_lt?: Maybe<String>;
  senderNote_lte?: Maybe<String>;
  senderNote_gt?: Maybe<String>;
  senderNote_gte?: Maybe<String>;
  senderNote_contains?: Maybe<String>;
  senderNote_not_contains?: Maybe<String>;
  senderNote_starts_with?: Maybe<String>;
  senderNote_not_starts_with?: Maybe<String>;
  senderNote_ends_with?: Maybe<String>;
  senderNote_not_ends_with?: Maybe<String>;
  receiverNote?: Maybe<String>;
  receiverNote_not?: Maybe<String>;
  receiverNote_in?: Maybe<String[] | String>;
  receiverNote_not_in?: Maybe<String[] | String>;
  receiverNote_lt?: Maybe<String>;
  receiverNote_lte?: Maybe<String>;
  receiverNote_gt?: Maybe<String>;
  receiverNote_gte?: Maybe<String>;
  receiverNote_contains?: Maybe<String>;
  receiverNote_not_contains?: Maybe<String>;
  receiverNote_starts_with?: Maybe<String>;
  receiverNote_not_starts_with?: Maybe<String>;
  receiverNote_ends_with?: Maybe<String>;
  receiverNote_not_ends_with?: Maybe<String>;
  senderEvent?: Maybe<String>;
  senderEvent_not?: Maybe<String>;
  senderEvent_in?: Maybe<String[] | String>;
  senderEvent_not_in?: Maybe<String[] | String>;
  senderEvent_lt?: Maybe<String>;
  senderEvent_lte?: Maybe<String>;
  senderEvent_gt?: Maybe<String>;
  senderEvent_gte?: Maybe<String>;
  senderEvent_contains?: Maybe<String>;
  senderEvent_not_contains?: Maybe<String>;
  senderEvent_starts_with?: Maybe<String>;
  senderEvent_not_starts_with?: Maybe<String>;
  senderEvent_ends_with?: Maybe<String>;
  senderEvent_not_ends_with?: Maybe<String>;
  receiverEvent?: Maybe<String>;
  receiverEvent_not?: Maybe<String>;
  receiverEvent_in?: Maybe<String[] | String>;
  receiverEvent_not_in?: Maybe<String[] | String>;
  receiverEvent_lt?: Maybe<String>;
  receiverEvent_lte?: Maybe<String>;
  receiverEvent_gt?: Maybe<String>;
  receiverEvent_gte?: Maybe<String>;
  receiverEvent_contains?: Maybe<String>;
  receiverEvent_not_contains?: Maybe<String>;
  receiverEvent_starts_with?: Maybe<String>;
  receiverEvent_not_starts_with?: Maybe<String>;
  receiverEvent_ends_with?: Maybe<String>;
  receiverEvent_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ConnectionScalarWhereInput[] | ConnectionScalarWhereInput>;
  OR?: Maybe<ConnectionScalarWhereInput[] | ConnectionScalarWhereInput>;
  NOT?: Maybe<ConnectionScalarWhereInput[] | ConnectionScalarWhereInput>;
}

export interface ConnectionUpdateManyWithWhereNestedInput {
  where: ConnectionScalarWhereInput;
  data: ConnectionUpdateManyDataInput;
}

export interface ConnectionUpdateManyDataInput {
  status?: Maybe<ConnectionStatus>;
  senderLat?: Maybe<Float>;
  senderLon?: Maybe<Float>;
  receiverLat?: Maybe<Float>;
  receiverLon?: Maybe<Float>;
  location?: Maybe<String>;
  senderNote?: Maybe<String>;
  receiverNote?: Maybe<String>;
  senderEvent?: Maybe<String>;
  receiverEvent?: Maybe<String>;
}

export interface NotificationUpdateManyWithoutUserInput {
  create?: Maybe<
    NotificationCreateWithoutUserInput[] | NotificationCreateWithoutUserInput
  >;
  delete?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  connect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  set?: Maybe<NotificationWhereUniqueInput[] | NotificationWhereUniqueInput>;
  disconnect?: Maybe<
    NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  >;
  update?: Maybe<
    | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    | NotificationUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    | NotificationUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    NotificationScalarWhereInput[] | NotificationScalarWhereInput
  >;
  updateMany?: Maybe<
    | NotificationUpdateManyWithWhereNestedInput[]
    | NotificationUpdateManyWithWhereNestedInput
  >;
}

export interface NotificationUpdateWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput;
  data: NotificationUpdateWithoutUserDataInput;
}

export interface NotificationUpdateWithoutUserDataInput {
  message?: Maybe<String>;
}

export interface NotificationUpsertWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput;
  update: NotificationUpdateWithoutUserDataInput;
  create: NotificationCreateWithoutUserInput;
}

export interface NotificationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  AND?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  OR?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
  NOT?: Maybe<NotificationScalarWhereInput[] | NotificationScalarWhereInput>;
}

export interface NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput;
  data: NotificationUpdateManyDataInput;
}

export interface NotificationUpdateManyDataInput {
  message?: Maybe<String>;
}

export interface UserUpsertWithoutReceivedConnectionsInput {
  update: UserUpdateWithoutReceivedConnectionsDataInput;
  create: UserCreateWithoutReceivedConnectionsInput;
}

export interface ConnectionUpsertWithWhereUniqueWithoutSenderInput {
  where: ConnectionWhereUniqueInput;
  update: ConnectionUpdateWithoutSenderDataInput;
  create: ConnectionCreateWithoutSenderInput;
}

export interface UserUpsertWithoutBlockedConnectionsInput {
  update: UserUpdateWithoutBlockedConnectionsDataInput;
  create: UserCreateWithoutBlockedConnectionsInput;
}

export interface ConnectionUpsertWithWhereUniqueWithoutReceiverInput {
  where: ConnectionWhereUniqueInput;
  update: ConnectionUpdateWithoutReceiverDataInput;
  create: ConnectionCreateWithoutReceiverInput;
}

export interface UserUpsertWithoutSentConnectionsInput {
  update: UserUpdateWithoutSentConnectionsDataInput;
  create: UserCreateWithoutSentConnectionsInput;
}

export interface ConnectionUpdateManyMutationInput {
  status?: Maybe<ConnectionStatus>;
  senderLat?: Maybe<Float>;
  senderLon?: Maybe<Float>;
  receiverLat?: Maybe<Float>;
  receiverLon?: Maybe<Float>;
  location?: Maybe<String>;
  senderNote?: Maybe<String>;
  receiverNote?: Maybe<String>;
  senderEvent?: Maybe<String>;
  receiverEvent?: Maybe<String>;
}

export interface NotificationCreateInput {
  id?: Maybe<ID_Input>;
  message: String;
  user: UserCreateOneWithoutNotificationsInput;
}

export interface UserCreateOneWithoutNotificationsInput {
  create?: Maybe<UserCreateWithoutNotificationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutNotificationsInput {
  id?: Maybe<ID_Input>;
  authId: String;
  name?: Maybe<String>;
  picture?: Maybe<String>;
  birthdate?: Maybe<String>;
  location?: Maybe<String>;
  industry?: Maybe<String>;
  jobtitle?: Maybe<String>;
  tagline?: Maybe<String>;
  bio?: Maybe<String>;
  profile?: Maybe<ProfileFieldCreateManyWithoutUserInput>;
  qrcodes?: Maybe<QRCodeCreateManyWithoutUserInput>;
  sentConnections?: Maybe<ConnectionCreateManyWithoutSenderInput>;
  receivedConnections?: Maybe<ConnectionCreateManyWithoutReceiverInput>;
  blockedConnections?: Maybe<ConnectionCreateManyWithoutBlockerInput>;
  username?: Maybe<String>;
}

export interface NotificationUpdateInput {
  message?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutNotificationsInput>;
}

export interface UserUpdateOneRequiredWithoutNotificationsInput {
  create?: Maybe<UserCreateWithoutNotificationsInput>;
  update?: Maybe<UserUpdateWithoutNotificationsDataInput>;
  upsert?: Maybe<UserUpsertWithoutNotificationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutNotificationsDataInput {
  authId?: Maybe<String>;
  name?: Maybe<String>;
  picture?: Maybe<String>;
  birthdate?: Maybe<String>;
  location?: Maybe<String>;
  industry?: Maybe<String>;
  jobtitle?: Maybe<String>;
  tagline?: Maybe<String>;
  bio?: Maybe<String>;
  profile?: Maybe<ProfileFieldUpdateManyWithoutUserInput>;
  qrcodes?: Maybe<QRCodeUpdateManyWithoutUserInput>;
  sentConnections?: Maybe<ConnectionUpdateManyWithoutSenderInput>;
  receivedConnections?: Maybe<ConnectionUpdateManyWithoutReceiverInput>;
  blockedConnections?: Maybe<ConnectionUpdateManyWithoutBlockerInput>;
  username?: Maybe<String>;
}

export interface UserUpsertWithoutNotificationsInput {
  update: UserUpdateWithoutNotificationsDataInput;
  create: UserCreateWithoutNotificationsInput;
}

export interface NotificationUpdateManyMutationInput {
  message?: Maybe<String>;
}

export interface ProfileFieldCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutProfileInput;
  value: String;
  type: ProfileFieldType;
  privacy: ProfileFieldPrivacy;
  preferredContact?: Maybe<Boolean>;
}

export interface UserCreateOneWithoutProfileInput {
  create?: Maybe<UserCreateWithoutProfileInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutProfileInput {
  id?: Maybe<ID_Input>;
  authId: String;
  name?: Maybe<String>;
  picture?: Maybe<String>;
  birthdate?: Maybe<String>;
  location?: Maybe<String>;
  industry?: Maybe<String>;
  jobtitle?: Maybe<String>;
  tagline?: Maybe<String>;
  bio?: Maybe<String>;
  qrcodes?: Maybe<QRCodeCreateManyWithoutUserInput>;
  sentConnections?: Maybe<ConnectionCreateManyWithoutSenderInput>;
  receivedConnections?: Maybe<ConnectionCreateManyWithoutReceiverInput>;
  blockedConnections?: Maybe<ConnectionCreateManyWithoutBlockerInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  username?: Maybe<String>;
}

export interface ProfileFieldUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutProfileInput>;
  value?: Maybe<String>;
  type?: Maybe<ProfileFieldType>;
  privacy?: Maybe<ProfileFieldPrivacy>;
  preferredContact?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredWithoutProfileInput {
  create?: Maybe<UserCreateWithoutProfileInput>;
  update?: Maybe<UserUpdateWithoutProfileDataInput>;
  upsert?: Maybe<UserUpsertWithoutProfileInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutProfileDataInput {
  authId?: Maybe<String>;
  name?: Maybe<String>;
  picture?: Maybe<String>;
  birthdate?: Maybe<String>;
  location?: Maybe<String>;
  industry?: Maybe<String>;
  jobtitle?: Maybe<String>;
  tagline?: Maybe<String>;
  bio?: Maybe<String>;
  qrcodes?: Maybe<QRCodeUpdateManyWithoutUserInput>;
  sentConnections?: Maybe<ConnectionUpdateManyWithoutSenderInput>;
  receivedConnections?: Maybe<ConnectionUpdateManyWithoutReceiverInput>;
  blockedConnections?: Maybe<ConnectionUpdateManyWithoutBlockerInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  username?: Maybe<String>;
}

export interface UserUpsertWithoutProfileInput {
  update: UserUpdateWithoutProfileDataInput;
  create: UserCreateWithoutProfileInput;
}

export interface ProfileFieldUpdateManyMutationInput {
  value?: Maybe<String>;
  type?: Maybe<ProfileFieldType>;
  privacy?: Maybe<ProfileFieldPrivacy>;
  preferredContact?: Maybe<Boolean>;
}

export interface QRCodeCreateInput {
  id?: Maybe<ID_Input>;
  label?: Maybe<String>;
  scans?: Maybe<Int>;
  user?: Maybe<UserCreateOneWithoutQrcodesInput>;
}

export interface UserCreateOneWithoutQrcodesInput {
  create?: Maybe<UserCreateWithoutQrcodesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutQrcodesInput {
  id?: Maybe<ID_Input>;
  authId: String;
  name?: Maybe<String>;
  picture?: Maybe<String>;
  birthdate?: Maybe<String>;
  location?: Maybe<String>;
  industry?: Maybe<String>;
  jobtitle?: Maybe<String>;
  tagline?: Maybe<String>;
  bio?: Maybe<String>;
  profile?: Maybe<ProfileFieldCreateManyWithoutUserInput>;
  sentConnections?: Maybe<ConnectionCreateManyWithoutSenderInput>;
  receivedConnections?: Maybe<ConnectionCreateManyWithoutReceiverInput>;
  blockedConnections?: Maybe<ConnectionCreateManyWithoutBlockerInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  username?: Maybe<String>;
}

export interface QRCodeUpdateInput {
  label?: Maybe<String>;
  scans?: Maybe<Int>;
  user?: Maybe<UserUpdateOneWithoutQrcodesInput>;
}

export interface UserUpdateOneWithoutQrcodesInput {
  create?: Maybe<UserCreateWithoutQrcodesInput>;
  update?: Maybe<UserUpdateWithoutQrcodesDataInput>;
  upsert?: Maybe<UserUpsertWithoutQrcodesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutQrcodesDataInput {
  authId?: Maybe<String>;
  name?: Maybe<String>;
  picture?: Maybe<String>;
  birthdate?: Maybe<String>;
  location?: Maybe<String>;
  industry?: Maybe<String>;
  jobtitle?: Maybe<String>;
  tagline?: Maybe<String>;
  bio?: Maybe<String>;
  profile?: Maybe<ProfileFieldUpdateManyWithoutUserInput>;
  sentConnections?: Maybe<ConnectionUpdateManyWithoutSenderInput>;
  receivedConnections?: Maybe<ConnectionUpdateManyWithoutReceiverInput>;
  blockedConnections?: Maybe<ConnectionUpdateManyWithoutBlockerInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  username?: Maybe<String>;
}

export interface UserUpsertWithoutQrcodesInput {
  update: UserUpdateWithoutQrcodesDataInput;
  create: UserCreateWithoutQrcodesInput;
}

export interface QRCodeUpdateManyMutationInput {
  label?: Maybe<String>;
  scans?: Maybe<Int>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  authId: String;
  name?: Maybe<String>;
  picture?: Maybe<String>;
  birthdate?: Maybe<String>;
  location?: Maybe<String>;
  industry?: Maybe<String>;
  jobtitle?: Maybe<String>;
  tagline?: Maybe<String>;
  bio?: Maybe<String>;
  profile?: Maybe<ProfileFieldCreateManyWithoutUserInput>;
  qrcodes?: Maybe<QRCodeCreateManyWithoutUserInput>;
  sentConnections?: Maybe<ConnectionCreateManyWithoutSenderInput>;
  receivedConnections?: Maybe<ConnectionCreateManyWithoutReceiverInput>;
  blockedConnections?: Maybe<ConnectionCreateManyWithoutBlockerInput>;
  notifications?: Maybe<NotificationCreateManyWithoutUserInput>;
  username?: Maybe<String>;
}

export interface UserUpdateInput {
  authId?: Maybe<String>;
  name?: Maybe<String>;
  picture?: Maybe<String>;
  birthdate?: Maybe<String>;
  location?: Maybe<String>;
  industry?: Maybe<String>;
  jobtitle?: Maybe<String>;
  tagline?: Maybe<String>;
  bio?: Maybe<String>;
  profile?: Maybe<ProfileFieldUpdateManyWithoutUserInput>;
  qrcodes?: Maybe<QRCodeUpdateManyWithoutUserInput>;
  sentConnections?: Maybe<ConnectionUpdateManyWithoutSenderInput>;
  receivedConnections?: Maybe<ConnectionUpdateManyWithoutReceiverInput>;
  blockedConnections?: Maybe<ConnectionUpdateManyWithoutBlockerInput>;
  notifications?: Maybe<NotificationUpdateManyWithoutUserInput>;
  username?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  authId?: Maybe<String>;
  name?: Maybe<String>;
  picture?: Maybe<String>;
  birthdate?: Maybe<String>;
  location?: Maybe<String>;
  industry?: Maybe<String>;
  jobtitle?: Maybe<String>;
  tagline?: Maybe<String>;
  bio?: Maybe<String>;
  username?: Maybe<String>;
}

export interface ConnectionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ConnectionWhereInput>;
  AND?: Maybe<
    ConnectionSubscriptionWhereInput[] | ConnectionSubscriptionWhereInput
  >;
  OR?: Maybe<
    ConnectionSubscriptionWhereInput[] | ConnectionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ConnectionSubscriptionWhereInput[] | ConnectionSubscriptionWhereInput
  >;
}

export interface NotificationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NotificationWhereInput>;
  AND?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  OR?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
}

export interface ProfileFieldSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProfileFieldWhereInput>;
  AND?: Maybe<
    ProfileFieldSubscriptionWhereInput[] | ProfileFieldSubscriptionWhereInput
  >;
  OR?: Maybe<
    ProfileFieldSubscriptionWhereInput[] | ProfileFieldSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ProfileFieldSubscriptionWhereInput[] | ProfileFieldSubscriptionWhereInput
  >;
}

export interface QRCodeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QRCodeWhereInput>;
  AND?: Maybe<QRCodeSubscriptionWhereInput[] | QRCodeSubscriptionWhereInput>;
  OR?: Maybe<QRCodeSubscriptionWhereInput[] | QRCodeSubscriptionWhereInput>;
  NOT?: Maybe<QRCodeSubscriptionWhereInput[] | QRCodeSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Connection {
  id: ID_Output;
  status?: ConnectionStatus;
  senderLat?: Float;
  senderLon?: Float;
  receiverLat?: Float;
  receiverLon?: Float;
  location?: String;
  senderNote?: String;
  receiverNote?: String;
  senderEvent?: String;
  receiverEvent?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ConnectionPromise extends Promise<Connection>, Fragmentable {
  id: () => Promise<ID_Output>;
  sender: <T = UserPromise>() => T;
  receiver: <T = UserPromise>() => T;
  blocker: <T = UserPromise>() => T;
  status: () => Promise<ConnectionStatus>;
  senderLat: () => Promise<Float>;
  senderLon: () => Promise<Float>;
  receiverLat: () => Promise<Float>;
  receiverLon: () => Promise<Float>;
  location: () => Promise<String>;
  senderNote: () => Promise<String>;
  receiverNote: () => Promise<String>;
  senderEvent: () => Promise<String>;
  receiverEvent: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ConnectionSubscription
  extends Promise<AsyncIterator<Connection>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sender: <T = UserSubscription>() => T;
  receiver: <T = UserSubscription>() => T;
  blocker: <T = UserSubscription>() => T;
  status: () => Promise<AsyncIterator<ConnectionStatus>>;
  senderLat: () => Promise<AsyncIterator<Float>>;
  senderLon: () => Promise<AsyncIterator<Float>>;
  receiverLat: () => Promise<AsyncIterator<Float>>;
  receiverLon: () => Promise<AsyncIterator<Float>>;
  location: () => Promise<AsyncIterator<String>>;
  senderNote: () => Promise<AsyncIterator<String>>;
  receiverNote: () => Promise<AsyncIterator<String>>;
  senderEvent: () => Promise<AsyncIterator<String>>;
  receiverEvent: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ConnectionNullablePromise
  extends Promise<Connection | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  sender: <T = UserPromise>() => T;
  receiver: <T = UserPromise>() => T;
  blocker: <T = UserPromise>() => T;
  status: () => Promise<ConnectionStatus>;
  senderLat: () => Promise<Float>;
  senderLon: () => Promise<Float>;
  receiverLat: () => Promise<Float>;
  receiverLon: () => Promise<Float>;
  location: () => Promise<String>;
  senderNote: () => Promise<String>;
  receiverNote: () => Promise<String>;
  senderEvent: () => Promise<String>;
  receiverEvent: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  authId: String;
  name?: String;
  picture?: String;
  birthdate?: String;
  location?: String;
  industry?: String;
  jobtitle?: String;
  tagline?: String;
  bio?: String;
  username?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  authId: () => Promise<String>;
  name: () => Promise<String>;
  picture: () => Promise<String>;
  birthdate: () => Promise<String>;
  location: () => Promise<String>;
  industry: () => Promise<String>;
  jobtitle: () => Promise<String>;
  tagline: () => Promise<String>;
  bio: () => Promise<String>;
  profile: <T = FragmentableArray<ProfileField>>(args?: {
    where?: ProfileFieldWhereInput;
    orderBy?: ProfileFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  qrcodes: <T = FragmentableArray<QRCode>>(args?: {
    where?: QRCodeWhereInput;
    orderBy?: QRCodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sentConnections: <T = FragmentableArray<Connection>>(args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  receivedConnections: <T = FragmentableArray<Connection>>(args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blockedConnections: <T = FragmentableArray<Connection>>(args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  username: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  authId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  picture: () => Promise<AsyncIterator<String>>;
  birthdate: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  industry: () => Promise<AsyncIterator<String>>;
  jobtitle: () => Promise<AsyncIterator<String>>;
  tagline: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  profile: <T = Promise<AsyncIterator<ProfileFieldSubscription>>>(args?: {
    where?: ProfileFieldWhereInput;
    orderBy?: ProfileFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  qrcodes: <T = Promise<AsyncIterator<QRCodeSubscription>>>(args?: {
    where?: QRCodeWhereInput;
    orderBy?: QRCodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sentConnections: <T = Promise<AsyncIterator<ConnectionSubscription>>>(args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  receivedConnections: <
    T = Promise<AsyncIterator<ConnectionSubscription>>
  >(args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blockedConnections: <
    T = Promise<AsyncIterator<ConnectionSubscription>>
  >(args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = Promise<AsyncIterator<NotificationSubscription>>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  username: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  authId: () => Promise<String>;
  name: () => Promise<String>;
  picture: () => Promise<String>;
  birthdate: () => Promise<String>;
  location: () => Promise<String>;
  industry: () => Promise<String>;
  jobtitle: () => Promise<String>;
  tagline: () => Promise<String>;
  bio: () => Promise<String>;
  profile: <T = FragmentableArray<ProfileField>>(args?: {
    where?: ProfileFieldWhereInput;
    orderBy?: ProfileFieldOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  qrcodes: <T = FragmentableArray<QRCode>>(args?: {
    where?: QRCodeWhereInput;
    orderBy?: QRCodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  sentConnections: <T = FragmentableArray<Connection>>(args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  receivedConnections: <T = FragmentableArray<Connection>>(args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  blockedConnections: <T = FragmentableArray<Connection>>(args?: {
    where?: ConnectionWhereInput;
    orderBy?: ConnectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<Notification>>(args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  username: () => Promise<String>;
}

export interface ProfileField {
  id: ID_Output;
  value: String;
  type: ProfileFieldType;
  privacy: ProfileFieldPrivacy;
  preferredContact?: Boolean;
}

export interface ProfileFieldPromise
  extends Promise<ProfileField>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  value: () => Promise<String>;
  type: () => Promise<ProfileFieldType>;
  privacy: () => Promise<ProfileFieldPrivacy>;
  preferredContact: () => Promise<Boolean>;
}

export interface ProfileFieldSubscription
  extends Promise<AsyncIterator<ProfileField>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  value: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ProfileFieldType>>;
  privacy: () => Promise<AsyncIterator<ProfileFieldPrivacy>>;
  preferredContact: () => Promise<AsyncIterator<Boolean>>;
}

export interface ProfileFieldNullablePromise
  extends Promise<ProfileField | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  value: () => Promise<String>;
  type: () => Promise<ProfileFieldType>;
  privacy: () => Promise<ProfileFieldPrivacy>;
  preferredContact: () => Promise<Boolean>;
}

export interface QRCode {
  id: ID_Output;
  label?: String;
  scans?: Int;
}

export interface QRCodePromise extends Promise<QRCode>, Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
  scans: () => Promise<Int>;
  user: <T = UserPromise>() => T;
}

export interface QRCodeSubscription
  extends Promise<AsyncIterator<QRCode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  label: () => Promise<AsyncIterator<String>>;
  scans: () => Promise<AsyncIterator<Int>>;
  user: <T = UserSubscription>() => T;
}

export interface QRCodeNullablePromise
  extends Promise<QRCode | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
  scans: () => Promise<Int>;
  user: <T = UserPromise>() => T;
}

export interface Notification {
  id: ID_Output;
  message: String;
}

export interface NotificationPromise
  extends Promise<Notification>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  message: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface NotificationSubscription
  extends Promise<AsyncIterator<Notification>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  message: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface NotificationNullablePromise
  extends Promise<Notification | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  message: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface ConnectionConnection {
  pageInfo: PageInfo;
  edges: ConnectionEdge[];
}

export interface ConnectionConnectionPromise
  extends Promise<ConnectionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ConnectionEdge>>() => T;
  aggregate: <T = AggregateConnectionPromise>() => T;
}

export interface ConnectionConnectionSubscription
  extends Promise<AsyncIterator<ConnectionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConnectionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConnectionSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ConnectionEdge {
  node: Connection;
  cursor: String;
}

export interface ConnectionEdgePromise
  extends Promise<ConnectionEdge>,
    Fragmentable {
  node: <T = ConnectionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ConnectionEdgeSubscription
  extends Promise<AsyncIterator<ConnectionEdge>>,
    Fragmentable {
  node: <T = ConnectionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateConnection {
  count: Int;
}

export interface AggregateConnectionPromise
  extends Promise<AggregateConnection>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConnectionSubscription
  extends Promise<AsyncIterator<AggregateConnection>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NotificationConnection {
  pageInfo: PageInfo;
  edges: NotificationEdge[];
}

export interface NotificationConnectionPromise
  extends Promise<NotificationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NotificationEdge>>() => T;
  aggregate: <T = AggregateNotificationPromise>() => T;
}

export interface NotificationConnectionSubscription
  extends Promise<AsyncIterator<NotificationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NotificationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNotificationSubscription>() => T;
}

export interface NotificationEdge {
  node: Notification;
  cursor: String;
}

export interface NotificationEdgePromise
  extends Promise<NotificationEdge>,
    Fragmentable {
  node: <T = NotificationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NotificationEdgeSubscription
  extends Promise<AsyncIterator<NotificationEdge>>,
    Fragmentable {
  node: <T = NotificationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNotification {
  count: Int;
}

export interface AggregateNotificationPromise
  extends Promise<AggregateNotification>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNotificationSubscription
  extends Promise<AsyncIterator<AggregateNotification>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProfileFieldConnection {
  pageInfo: PageInfo;
  edges: ProfileFieldEdge[];
}

export interface ProfileFieldConnectionPromise
  extends Promise<ProfileFieldConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProfileFieldEdge>>() => T;
  aggregate: <T = AggregateProfileFieldPromise>() => T;
}

export interface ProfileFieldConnectionSubscription
  extends Promise<AsyncIterator<ProfileFieldConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProfileFieldEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProfileFieldSubscription>() => T;
}

export interface ProfileFieldEdge {
  node: ProfileField;
  cursor: String;
}

export interface ProfileFieldEdgePromise
  extends Promise<ProfileFieldEdge>,
    Fragmentable {
  node: <T = ProfileFieldPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProfileFieldEdgeSubscription
  extends Promise<AsyncIterator<ProfileFieldEdge>>,
    Fragmentable {
  node: <T = ProfileFieldSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProfileField {
  count: Int;
}

export interface AggregateProfileFieldPromise
  extends Promise<AggregateProfileField>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProfileFieldSubscription
  extends Promise<AsyncIterator<AggregateProfileField>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface QRCodeConnection {
  pageInfo: PageInfo;
  edges: QRCodeEdge[];
}

export interface QRCodeConnectionPromise
  extends Promise<QRCodeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QRCodeEdge>>() => T;
  aggregate: <T = AggregateQRCodePromise>() => T;
}

export interface QRCodeConnectionSubscription
  extends Promise<AsyncIterator<QRCodeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QRCodeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQRCodeSubscription>() => T;
}

export interface QRCodeEdge {
  node: QRCode;
  cursor: String;
}

export interface QRCodeEdgePromise extends Promise<QRCodeEdge>, Fragmentable {
  node: <T = QRCodePromise>() => T;
  cursor: () => Promise<String>;
}

export interface QRCodeEdgeSubscription
  extends Promise<AsyncIterator<QRCodeEdge>>,
    Fragmentable {
  node: <T = QRCodeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQRCode {
  count: Int;
}

export interface AggregateQRCodePromise
  extends Promise<AggregateQRCode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQRCodeSubscription
  extends Promise<AsyncIterator<AggregateQRCode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ConnectionSubscriptionPayload {
  mutation: MutationType;
  node: Connection;
  updatedFields: String[];
  previousValues: ConnectionPreviousValues;
}

export interface ConnectionSubscriptionPayloadPromise
  extends Promise<ConnectionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ConnectionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConnectionPreviousValuesPromise>() => T;
}

export interface ConnectionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConnectionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConnectionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConnectionPreviousValuesSubscription>() => T;
}

export interface ConnectionPreviousValues {
  id: ID_Output;
  status?: ConnectionStatus;
  senderLat?: Float;
  senderLon?: Float;
  receiverLat?: Float;
  receiverLon?: Float;
  location?: String;
  senderNote?: String;
  receiverNote?: String;
  senderEvent?: String;
  receiverEvent?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ConnectionPreviousValuesPromise
  extends Promise<ConnectionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<ConnectionStatus>;
  senderLat: () => Promise<Float>;
  senderLon: () => Promise<Float>;
  receiverLat: () => Promise<Float>;
  receiverLon: () => Promise<Float>;
  location: () => Promise<String>;
  senderNote: () => Promise<String>;
  receiverNote: () => Promise<String>;
  senderEvent: () => Promise<String>;
  receiverEvent: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ConnectionPreviousValuesSubscription
  extends Promise<AsyncIterator<ConnectionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<ConnectionStatus>>;
  senderLat: () => Promise<AsyncIterator<Float>>;
  senderLon: () => Promise<AsyncIterator<Float>>;
  receiverLat: () => Promise<AsyncIterator<Float>>;
  receiverLon: () => Promise<AsyncIterator<Float>>;
  location: () => Promise<AsyncIterator<String>>;
  senderNote: () => Promise<AsyncIterator<String>>;
  receiverNote: () => Promise<AsyncIterator<String>>;
  senderEvent: () => Promise<AsyncIterator<String>>;
  receiverEvent: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface NotificationSubscriptionPayload {
  mutation: MutationType;
  node: Notification;
  updatedFields: String[];
  previousValues: NotificationPreviousValues;
}

export interface NotificationSubscriptionPayloadPromise
  extends Promise<NotificationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotificationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotificationPreviousValuesPromise>() => T;
}

export interface NotificationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NotificationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NotificationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotificationPreviousValuesSubscription>() => T;
}

export interface NotificationPreviousValues {
  id: ID_Output;
  message: String;
}

export interface NotificationPreviousValuesPromise
  extends Promise<NotificationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  message: () => Promise<String>;
}

export interface NotificationPreviousValuesSubscription
  extends Promise<AsyncIterator<NotificationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  message: () => Promise<AsyncIterator<String>>;
}

export interface ProfileFieldSubscriptionPayload {
  mutation: MutationType;
  node: ProfileField;
  updatedFields: String[];
  previousValues: ProfileFieldPreviousValues;
}

export interface ProfileFieldSubscriptionPayloadPromise
  extends Promise<ProfileFieldSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProfileFieldPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProfileFieldPreviousValuesPromise>() => T;
}

export interface ProfileFieldSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProfileFieldSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProfileFieldSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProfileFieldPreviousValuesSubscription>() => T;
}

export interface ProfileFieldPreviousValues {
  id: ID_Output;
  value: String;
  type: ProfileFieldType;
  privacy: ProfileFieldPrivacy;
  preferredContact?: Boolean;
}

export interface ProfileFieldPreviousValuesPromise
  extends Promise<ProfileFieldPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  type: () => Promise<ProfileFieldType>;
  privacy: () => Promise<ProfileFieldPrivacy>;
  preferredContact: () => Promise<Boolean>;
}

export interface ProfileFieldPreviousValuesSubscription
  extends Promise<AsyncIterator<ProfileFieldPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ProfileFieldType>>;
  privacy: () => Promise<AsyncIterator<ProfileFieldPrivacy>>;
  preferredContact: () => Promise<AsyncIterator<Boolean>>;
}

export interface QRCodeSubscriptionPayload {
  mutation: MutationType;
  node: QRCode;
  updatedFields: String[];
  previousValues: QRCodePreviousValues;
}

export interface QRCodeSubscriptionPayloadPromise
  extends Promise<QRCodeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QRCodePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QRCodePreviousValuesPromise>() => T;
}

export interface QRCodeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QRCodeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QRCodeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QRCodePreviousValuesSubscription>() => T;
}

export interface QRCodePreviousValues {
  id: ID_Output;
  label?: String;
  scans?: Int;
}

export interface QRCodePreviousValuesPromise
  extends Promise<QRCodePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
  scans: () => Promise<Int>;
}

export interface QRCodePreviousValuesSubscription
  extends Promise<AsyncIterator<QRCodePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  label: () => Promise<AsyncIterator<String>>;
  scans: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  authId: String;
  name?: String;
  picture?: String;
  birthdate?: String;
  location?: String;
  industry?: String;
  jobtitle?: String;
  tagline?: String;
  bio?: String;
  username?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  authId: () => Promise<String>;
  name: () => Promise<String>;
  picture: () => Promise<String>;
  birthdate: () => Promise<String>;
  location: () => Promise<String>;
  industry: () => Promise<String>;
  jobtitle: () => Promise<String>;
  tagline: () => Promise<String>;
  bio: () => Promise<String>;
  username: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  authId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  picture: () => Promise<AsyncIterator<String>>;
  birthdate: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  industry: () => Promise<AsyncIterator<String>>;
  jobtitle: () => Promise<AsyncIterator<String>>;
  tagline: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "ProfileField",
    embedded: false
  },
  {
    name: "ProfileFieldType",
    embedded: false
  },
  {
    name: "ProfileFieldPrivacy",
    embedded: false
  },
  {
    name: "QRCode",
    embedded: false
  },
  {
    name: "Connection",
    embedded: false
  },
  {
    name: "ConnectionStatus",
    embedded: false
  },
  {
    name: "Notification",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
