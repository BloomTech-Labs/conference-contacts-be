module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateConnection {
  count: Int!
}

type AggregateNotification {
  count: Int!
}

type AggregateProfileField {
  count: Int!
}

type AggregateQRCode {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Connection {
  id: ID!
  sender: User
  receiver: User
  blocker: User
  status: ConnectionStatus
  senderLat: Float
  senderLon: Float
  receiverLat: Float
  receiverLon: Float
  location: String
  senderNote: String
  receiverNote: String
  senderEvent: String
  receiverEvent: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ConnectionConnection {
  pageInfo: PageInfo!
  edges: [ConnectionEdge]!
  aggregate: AggregateConnection!
}

input ConnectionCreateInput {
  id: ID
  sender: UserCreateOneWithoutSentConnectionsInput
  receiver: UserCreateOneWithoutReceivedConnectionsInput
  blocker: UserCreateOneWithoutBlockedConnectionsInput
  status: ConnectionStatus
  senderLat: Float
  senderLon: Float
  receiverLat: Float
  receiverLon: Float
  location: String
  senderNote: String
  receiverNote: String
  senderEvent: String
  receiverEvent: String
}

input ConnectionCreateManyWithoutBlockerInput {
  create: [ConnectionCreateWithoutBlockerInput!]
  connect: [ConnectionWhereUniqueInput!]
}

input ConnectionCreateManyWithoutReceiverInput {
  create: [ConnectionCreateWithoutReceiverInput!]
  connect: [ConnectionWhereUniqueInput!]
}

input ConnectionCreateManyWithoutSenderInput {
  create: [ConnectionCreateWithoutSenderInput!]
  connect: [ConnectionWhereUniqueInput!]
}

input ConnectionCreateWithoutBlockerInput {
  id: ID
  sender: UserCreateOneWithoutSentConnectionsInput
  receiver: UserCreateOneWithoutReceivedConnectionsInput
  status: ConnectionStatus
  senderLat: Float
  senderLon: Float
  receiverLat: Float
  receiverLon: Float
  location: String
  senderNote: String
  receiverNote: String
  senderEvent: String
  receiverEvent: String
}

input ConnectionCreateWithoutReceiverInput {
  id: ID
  sender: UserCreateOneWithoutSentConnectionsInput
  blocker: UserCreateOneWithoutBlockedConnectionsInput
  status: ConnectionStatus
  senderLat: Float
  senderLon: Float
  receiverLat: Float
  receiverLon: Float
  location: String
  senderNote: String
  receiverNote: String
  senderEvent: String
  receiverEvent: String
}

input ConnectionCreateWithoutSenderInput {
  id: ID
  receiver: UserCreateOneWithoutReceivedConnectionsInput
  blocker: UserCreateOneWithoutBlockedConnectionsInput
  status: ConnectionStatus
  senderLat: Float
  senderLon: Float
  receiverLat: Float
  receiverLon: Float
  location: String
  senderNote: String
  receiverNote: String
  senderEvent: String
  receiverEvent: String
}

type ConnectionEdge {
  node: Connection!
  cursor: String!
}

enum ConnectionOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  senderLat_ASC
  senderLat_DESC
  senderLon_ASC
  senderLon_DESC
  receiverLat_ASC
  receiverLat_DESC
  receiverLon_ASC
  receiverLon_DESC
  location_ASC
  location_DESC
  senderNote_ASC
  senderNote_DESC
  receiverNote_ASC
  receiverNote_DESC
  senderEvent_ASC
  senderEvent_DESC
  receiverEvent_ASC
  receiverEvent_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ConnectionPreviousValues {
  id: ID!
  status: ConnectionStatus
  senderLat: Float
  senderLon: Float
  receiverLat: Float
  receiverLon: Float
  location: String
  senderNote: String
  receiverNote: String
  senderEvent: String
  receiverEvent: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ConnectionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: ConnectionStatus
  status_not: ConnectionStatus
  status_in: [ConnectionStatus!]
  status_not_in: [ConnectionStatus!]
  senderLat: Float
  senderLat_not: Float
  senderLat_in: [Float!]
  senderLat_not_in: [Float!]
  senderLat_lt: Float
  senderLat_lte: Float
  senderLat_gt: Float
  senderLat_gte: Float
  senderLon: Float
  senderLon_not: Float
  senderLon_in: [Float!]
  senderLon_not_in: [Float!]
  senderLon_lt: Float
  senderLon_lte: Float
  senderLon_gt: Float
  senderLon_gte: Float
  receiverLat: Float
  receiverLat_not: Float
  receiverLat_in: [Float!]
  receiverLat_not_in: [Float!]
  receiverLat_lt: Float
  receiverLat_lte: Float
  receiverLat_gt: Float
  receiverLat_gte: Float
  receiverLon: Float
  receiverLon_not: Float
  receiverLon_in: [Float!]
  receiverLon_not_in: [Float!]
  receiverLon_lt: Float
  receiverLon_lte: Float
  receiverLon_gt: Float
  receiverLon_gte: Float
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  senderNote: String
  senderNote_not: String
  senderNote_in: [String!]
  senderNote_not_in: [String!]
  senderNote_lt: String
  senderNote_lte: String
  senderNote_gt: String
  senderNote_gte: String
  senderNote_contains: String
  senderNote_not_contains: String
  senderNote_starts_with: String
  senderNote_not_starts_with: String
  senderNote_ends_with: String
  senderNote_not_ends_with: String
  receiverNote: String
  receiverNote_not: String
  receiverNote_in: [String!]
  receiverNote_not_in: [String!]
  receiverNote_lt: String
  receiverNote_lte: String
  receiverNote_gt: String
  receiverNote_gte: String
  receiverNote_contains: String
  receiverNote_not_contains: String
  receiverNote_starts_with: String
  receiverNote_not_starts_with: String
  receiverNote_ends_with: String
  receiverNote_not_ends_with: String
  senderEvent: String
  senderEvent_not: String
  senderEvent_in: [String!]
  senderEvent_not_in: [String!]
  senderEvent_lt: String
  senderEvent_lte: String
  senderEvent_gt: String
  senderEvent_gte: String
  senderEvent_contains: String
  senderEvent_not_contains: String
  senderEvent_starts_with: String
  senderEvent_not_starts_with: String
  senderEvent_ends_with: String
  senderEvent_not_ends_with: String
  receiverEvent: String
  receiverEvent_not: String
  receiverEvent_in: [String!]
  receiverEvent_not_in: [String!]
  receiverEvent_lt: String
  receiverEvent_lte: String
  receiverEvent_gt: String
  receiverEvent_gte: String
  receiverEvent_contains: String
  receiverEvent_not_contains: String
  receiverEvent_starts_with: String
  receiverEvent_not_starts_with: String
  receiverEvent_ends_with: String
  receiverEvent_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ConnectionScalarWhereInput!]
  OR: [ConnectionScalarWhereInput!]
  NOT: [ConnectionScalarWhereInput!]
}

enum ConnectionStatus {
  PENDING
  CONNECTED
}

type ConnectionSubscriptionPayload {
  mutation: MutationType!
  node: Connection
  updatedFields: [String!]
  previousValues: ConnectionPreviousValues
}

input ConnectionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConnectionWhereInput
  AND: [ConnectionSubscriptionWhereInput!]
  OR: [ConnectionSubscriptionWhereInput!]
  NOT: [ConnectionSubscriptionWhereInput!]
}

input ConnectionUpdateInput {
  sender: UserUpdateOneWithoutSentConnectionsInput
  receiver: UserUpdateOneWithoutReceivedConnectionsInput
  blocker: UserUpdateOneWithoutBlockedConnectionsInput
  status: ConnectionStatus
  senderLat: Float
  senderLon: Float
  receiverLat: Float
  receiverLon: Float
  location: String
  senderNote: String
  receiverNote: String
  senderEvent: String
  receiverEvent: String
}

input ConnectionUpdateManyDataInput {
  status: ConnectionStatus
  senderLat: Float
  senderLon: Float
  receiverLat: Float
  receiverLon: Float
  location: String
  senderNote: String
  receiverNote: String
  senderEvent: String
  receiverEvent: String
}

input ConnectionUpdateManyMutationInput {
  status: ConnectionStatus
  senderLat: Float
  senderLon: Float
  receiverLat: Float
  receiverLon: Float
  location: String
  senderNote: String
  receiverNote: String
  senderEvent: String
  receiverEvent: String
}

input ConnectionUpdateManyWithoutBlockerInput {
  create: [ConnectionCreateWithoutBlockerInput!]
  delete: [ConnectionWhereUniqueInput!]
  connect: [ConnectionWhereUniqueInput!]
  set: [ConnectionWhereUniqueInput!]
  disconnect: [ConnectionWhereUniqueInput!]
  update: [ConnectionUpdateWithWhereUniqueWithoutBlockerInput!]
  upsert: [ConnectionUpsertWithWhereUniqueWithoutBlockerInput!]
  deleteMany: [ConnectionScalarWhereInput!]
  updateMany: [ConnectionUpdateManyWithWhereNestedInput!]
}

input ConnectionUpdateManyWithoutReceiverInput {
  create: [ConnectionCreateWithoutReceiverInput!]
  delete: [ConnectionWhereUniqueInput!]
  connect: [ConnectionWhereUniqueInput!]
  set: [ConnectionWhereUniqueInput!]
  disconnect: [ConnectionWhereUniqueInput!]
  update: [ConnectionUpdateWithWhereUniqueWithoutReceiverInput!]
  upsert: [ConnectionUpsertWithWhereUniqueWithoutReceiverInput!]
  deleteMany: [ConnectionScalarWhereInput!]
  updateMany: [ConnectionUpdateManyWithWhereNestedInput!]
}

input ConnectionUpdateManyWithoutSenderInput {
  create: [ConnectionCreateWithoutSenderInput!]
  delete: [ConnectionWhereUniqueInput!]
  connect: [ConnectionWhereUniqueInput!]
  set: [ConnectionWhereUniqueInput!]
  disconnect: [ConnectionWhereUniqueInput!]
  update: [ConnectionUpdateWithWhereUniqueWithoutSenderInput!]
  upsert: [ConnectionUpsertWithWhereUniqueWithoutSenderInput!]
  deleteMany: [ConnectionScalarWhereInput!]
  updateMany: [ConnectionUpdateManyWithWhereNestedInput!]
}

input ConnectionUpdateManyWithWhereNestedInput {
  where: ConnectionScalarWhereInput!
  data: ConnectionUpdateManyDataInput!
}

input ConnectionUpdateWithoutBlockerDataInput {
  sender: UserUpdateOneWithoutSentConnectionsInput
  receiver: UserUpdateOneWithoutReceivedConnectionsInput
  status: ConnectionStatus
  senderLat: Float
  senderLon: Float
  receiverLat: Float
  receiverLon: Float
  location: String
  senderNote: String
  receiverNote: String
  senderEvent: String
  receiverEvent: String
}

input ConnectionUpdateWithoutReceiverDataInput {
  sender: UserUpdateOneWithoutSentConnectionsInput
  blocker: UserUpdateOneWithoutBlockedConnectionsInput
  status: ConnectionStatus
  senderLat: Float
  senderLon: Float
  receiverLat: Float
  receiverLon: Float
  location: String
  senderNote: String
  receiverNote: String
  senderEvent: String
  receiverEvent: String
}

input ConnectionUpdateWithoutSenderDataInput {
  receiver: UserUpdateOneWithoutReceivedConnectionsInput
  blocker: UserUpdateOneWithoutBlockedConnectionsInput
  status: ConnectionStatus
  senderLat: Float
  senderLon: Float
  receiverLat: Float
  receiverLon: Float
  location: String
  senderNote: String
  receiverNote: String
  senderEvent: String
  receiverEvent: String
}

input ConnectionUpdateWithWhereUniqueWithoutBlockerInput {
  where: ConnectionWhereUniqueInput!
  data: ConnectionUpdateWithoutBlockerDataInput!
}

input ConnectionUpdateWithWhereUniqueWithoutReceiverInput {
  where: ConnectionWhereUniqueInput!
  data: ConnectionUpdateWithoutReceiverDataInput!
}

input ConnectionUpdateWithWhereUniqueWithoutSenderInput {
  where: ConnectionWhereUniqueInput!
  data: ConnectionUpdateWithoutSenderDataInput!
}

input ConnectionUpsertWithWhereUniqueWithoutBlockerInput {
  where: ConnectionWhereUniqueInput!
  update: ConnectionUpdateWithoutBlockerDataInput!
  create: ConnectionCreateWithoutBlockerInput!
}

input ConnectionUpsertWithWhereUniqueWithoutReceiverInput {
  where: ConnectionWhereUniqueInput!
  update: ConnectionUpdateWithoutReceiverDataInput!
  create: ConnectionCreateWithoutReceiverInput!
}

input ConnectionUpsertWithWhereUniqueWithoutSenderInput {
  where: ConnectionWhereUniqueInput!
  update: ConnectionUpdateWithoutSenderDataInput!
  create: ConnectionCreateWithoutSenderInput!
}

input ConnectionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sender: UserWhereInput
  receiver: UserWhereInput
  blocker: UserWhereInput
  status: ConnectionStatus
  status_not: ConnectionStatus
  status_in: [ConnectionStatus!]
  status_not_in: [ConnectionStatus!]
  senderLat: Float
  senderLat_not: Float
  senderLat_in: [Float!]
  senderLat_not_in: [Float!]
  senderLat_lt: Float
  senderLat_lte: Float
  senderLat_gt: Float
  senderLat_gte: Float
  senderLon: Float
  senderLon_not: Float
  senderLon_in: [Float!]
  senderLon_not_in: [Float!]
  senderLon_lt: Float
  senderLon_lte: Float
  senderLon_gt: Float
  senderLon_gte: Float
  receiverLat: Float
  receiverLat_not: Float
  receiverLat_in: [Float!]
  receiverLat_not_in: [Float!]
  receiverLat_lt: Float
  receiverLat_lte: Float
  receiverLat_gt: Float
  receiverLat_gte: Float
  receiverLon: Float
  receiverLon_not: Float
  receiverLon_in: [Float!]
  receiverLon_not_in: [Float!]
  receiverLon_lt: Float
  receiverLon_lte: Float
  receiverLon_gt: Float
  receiverLon_gte: Float
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  senderNote: String
  senderNote_not: String
  senderNote_in: [String!]
  senderNote_not_in: [String!]
  senderNote_lt: String
  senderNote_lte: String
  senderNote_gt: String
  senderNote_gte: String
  senderNote_contains: String
  senderNote_not_contains: String
  senderNote_starts_with: String
  senderNote_not_starts_with: String
  senderNote_ends_with: String
  senderNote_not_ends_with: String
  receiverNote: String
  receiverNote_not: String
  receiverNote_in: [String!]
  receiverNote_not_in: [String!]
  receiverNote_lt: String
  receiverNote_lte: String
  receiverNote_gt: String
  receiverNote_gte: String
  receiverNote_contains: String
  receiverNote_not_contains: String
  receiverNote_starts_with: String
  receiverNote_not_starts_with: String
  receiverNote_ends_with: String
  receiverNote_not_ends_with: String
  senderEvent: String
  senderEvent_not: String
  senderEvent_in: [String!]
  senderEvent_not_in: [String!]
  senderEvent_lt: String
  senderEvent_lte: String
  senderEvent_gt: String
  senderEvent_gte: String
  senderEvent_contains: String
  senderEvent_not_contains: String
  senderEvent_starts_with: String
  senderEvent_not_starts_with: String
  senderEvent_ends_with: String
  senderEvent_not_ends_with: String
  receiverEvent: String
  receiverEvent_not: String
  receiverEvent_in: [String!]
  receiverEvent_not_in: [String!]
  receiverEvent_lt: String
  receiverEvent_lte: String
  receiverEvent_gt: String
  receiverEvent_gte: String
  receiverEvent_contains: String
  receiverEvent_not_contains: String
  receiverEvent_starts_with: String
  receiverEvent_not_starts_with: String
  receiverEvent_ends_with: String
  receiverEvent_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ConnectionWhereInput!]
  OR: [ConnectionWhereInput!]
  NOT: [ConnectionWhereInput!]
}

input ConnectionWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createConnection(data: ConnectionCreateInput!): Connection!
  updateConnection(data: ConnectionUpdateInput!, where: ConnectionWhereUniqueInput!): Connection
  updateManyConnections(data: ConnectionUpdateManyMutationInput!, where: ConnectionWhereInput): BatchPayload!
  upsertConnection(where: ConnectionWhereUniqueInput!, create: ConnectionCreateInput!, update: ConnectionUpdateInput!): Connection!
  deleteConnection(where: ConnectionWhereUniqueInput!): Connection
  deleteManyConnections(where: ConnectionWhereInput): BatchPayload!
  createNotification(data: NotificationCreateInput!): Notification!
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateManyNotifications(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): BatchPayload!
  upsertNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
  createProfileField(data: ProfileFieldCreateInput!): ProfileField!
  updateProfileField(data: ProfileFieldUpdateInput!, where: ProfileFieldWhereUniqueInput!): ProfileField
  updateManyProfileFields(data: ProfileFieldUpdateManyMutationInput!, where: ProfileFieldWhereInput): BatchPayload!
  upsertProfileField(where: ProfileFieldWhereUniqueInput!, create: ProfileFieldCreateInput!, update: ProfileFieldUpdateInput!): ProfileField!
  deleteProfileField(where: ProfileFieldWhereUniqueInput!): ProfileField
  deleteManyProfileFields(where: ProfileFieldWhereInput): BatchPayload!
  createQRCode(data: QRCodeCreateInput!): QRCode!
  updateQRCode(data: QRCodeUpdateInput!, where: QRCodeWhereUniqueInput!): QRCode
  updateManyQRCodes(data: QRCodeUpdateManyMutationInput!, where: QRCodeWhereInput): BatchPayload!
  upsertQRCode(where: QRCodeWhereUniqueInput!, create: QRCodeCreateInput!, update: QRCodeUpdateInput!): QRCode!
  deleteQRCode(where: QRCodeWhereUniqueInput!): QRCode
  deleteManyQRCodes(where: QRCodeWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Notification {
  id: ID!
  message: String!
  user: User!
}

type NotificationConnection {
  pageInfo: PageInfo!
  edges: [NotificationEdge]!
  aggregate: AggregateNotification!
}

input NotificationCreateInput {
  id: ID
  message: String!
  user: UserCreateOneWithoutNotificationsInput!
}

input NotificationCreateManyWithoutUserInput {
  create: [NotificationCreateWithoutUserInput!]
  connect: [NotificationWhereUniqueInput!]
}

input NotificationCreateWithoutUserInput {
  id: ID
  message: String!
}

type NotificationEdge {
  node: Notification!
  cursor: String!
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
  message_ASC
  message_DESC
}

type NotificationPreviousValues {
  id: ID!
  message: String!
}

input NotificationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  AND: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  NOT: [NotificationScalarWhereInput!]
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
  AND: [NotificationSubscriptionWhereInput!]
  OR: [NotificationSubscriptionWhereInput!]
  NOT: [NotificationSubscriptionWhereInput!]
}

input NotificationUpdateInput {
  message: String
  user: UserUpdateOneRequiredWithoutNotificationsInput
}

input NotificationUpdateManyDataInput {
  message: String
}

input NotificationUpdateManyMutationInput {
  message: String
}

input NotificationUpdateManyWithoutUserInput {
  create: [NotificationCreateWithoutUserInput!]
  delete: [NotificationWhereUniqueInput!]
  connect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  disconnect: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [NotificationScalarWhereInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
}

input NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput!
  data: NotificationUpdateManyDataInput!
}

input NotificationUpdateWithoutUserDataInput {
  message: String
}

input NotificationUpdateWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateWithoutUserDataInput!
}

input NotificationUpsertWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput!
  update: NotificationUpdateWithoutUserDataInput!
  create: NotificationCreateWithoutUserInput!
}

input NotificationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  user: UserWhereInput
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
}

input NotificationWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ProfileField {
  id: ID!
  user: User!
  value: String!
  type: ProfileFieldType!
  privacy: ProfileFieldPrivacy!
  preferredContact: Boolean
}

type ProfileFieldConnection {
  pageInfo: PageInfo!
  edges: [ProfileFieldEdge]!
  aggregate: AggregateProfileField!
}

input ProfileFieldCreateInput {
  id: ID
  user: UserCreateOneWithoutProfileInput!
  value: String!
  type: ProfileFieldType!
  privacy: ProfileFieldPrivacy!
  preferredContact: Boolean
}

input ProfileFieldCreateManyWithoutUserInput {
  create: [ProfileFieldCreateWithoutUserInput!]
  connect: [ProfileFieldWhereUniqueInput!]
}

input ProfileFieldCreateWithoutUserInput {
  id: ID
  value: String!
  type: ProfileFieldType!
  privacy: ProfileFieldPrivacy!
  preferredContact: Boolean
}

type ProfileFieldEdge {
  node: ProfileField!
  cursor: String!
}

enum ProfileFieldOrderByInput {
  id_ASC
  id_DESC
  value_ASC
  value_DESC
  type_ASC
  type_DESC
  privacy_ASC
  privacy_DESC
  preferredContact_ASC
  preferredContact_DESC
}

type ProfileFieldPreviousValues {
  id: ID!
  value: String!
  type: ProfileFieldType!
  privacy: ProfileFieldPrivacy!
  preferredContact: Boolean
}

enum ProfileFieldPrivacy {
  PUBLIC
  PRIVATE
  CONNECTED
}

input ProfileFieldScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  type: ProfileFieldType
  type_not: ProfileFieldType
  type_in: [ProfileFieldType!]
  type_not_in: [ProfileFieldType!]
  privacy: ProfileFieldPrivacy
  privacy_not: ProfileFieldPrivacy
  privacy_in: [ProfileFieldPrivacy!]
  privacy_not_in: [ProfileFieldPrivacy!]
  preferredContact: Boolean
  preferredContact_not: Boolean
  AND: [ProfileFieldScalarWhereInput!]
  OR: [ProfileFieldScalarWhereInput!]
  NOT: [ProfileFieldScalarWhereInput!]
}

type ProfileFieldSubscriptionPayload {
  mutation: MutationType!
  node: ProfileField
  updatedFields: [String!]
  previousValues: ProfileFieldPreviousValues
}

input ProfileFieldSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProfileFieldWhereInput
  AND: [ProfileFieldSubscriptionWhereInput!]
  OR: [ProfileFieldSubscriptionWhereInput!]
  NOT: [ProfileFieldSubscriptionWhereInput!]
}

enum ProfileFieldType {
  EMAIL
  PHONE
  SMS
  INSTAGRAM
  FACEBOOK
  LINKEDIN
  TWITTER
}

input ProfileFieldUpdateInput {
  user: UserUpdateOneRequiredWithoutProfileInput
  value: String
  type: ProfileFieldType
  privacy: ProfileFieldPrivacy
  preferredContact: Boolean
}

input ProfileFieldUpdateManyDataInput {
  value: String
  type: ProfileFieldType
  privacy: ProfileFieldPrivacy
  preferredContact: Boolean
}

input ProfileFieldUpdateManyMutationInput {
  value: String
  type: ProfileFieldType
  privacy: ProfileFieldPrivacy
  preferredContact: Boolean
}

input ProfileFieldUpdateManyWithoutUserInput {
  create: [ProfileFieldCreateWithoutUserInput!]
  delete: [ProfileFieldWhereUniqueInput!]
  connect: [ProfileFieldWhereUniqueInput!]
  set: [ProfileFieldWhereUniqueInput!]
  disconnect: [ProfileFieldWhereUniqueInput!]
  update: [ProfileFieldUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ProfileFieldUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ProfileFieldScalarWhereInput!]
  updateMany: [ProfileFieldUpdateManyWithWhereNestedInput!]
}

input ProfileFieldUpdateManyWithWhereNestedInput {
  where: ProfileFieldScalarWhereInput!
  data: ProfileFieldUpdateManyDataInput!
}

input ProfileFieldUpdateWithoutUserDataInput {
  value: String
  type: ProfileFieldType
  privacy: ProfileFieldPrivacy
  preferredContact: Boolean
}

input ProfileFieldUpdateWithWhereUniqueWithoutUserInput {
  where: ProfileFieldWhereUniqueInput!
  data: ProfileFieldUpdateWithoutUserDataInput!
}

input ProfileFieldUpsertWithWhereUniqueWithoutUserInput {
  where: ProfileFieldWhereUniqueInput!
  update: ProfileFieldUpdateWithoutUserDataInput!
  create: ProfileFieldCreateWithoutUserInput!
}

input ProfileFieldWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  type: ProfileFieldType
  type_not: ProfileFieldType
  type_in: [ProfileFieldType!]
  type_not_in: [ProfileFieldType!]
  privacy: ProfileFieldPrivacy
  privacy_not: ProfileFieldPrivacy
  privacy_in: [ProfileFieldPrivacy!]
  privacy_not_in: [ProfileFieldPrivacy!]
  preferredContact: Boolean
  preferredContact_not: Boolean
  AND: [ProfileFieldWhereInput!]
  OR: [ProfileFieldWhereInput!]
  NOT: [ProfileFieldWhereInput!]
}

input ProfileFieldWhereUniqueInput {
  id: ID
}

type QRCode {
  id: ID!
  label: String
  scans: Int
  user: User
}

type QRCodeConnection {
  pageInfo: PageInfo!
  edges: [QRCodeEdge]!
  aggregate: AggregateQRCode!
}

input QRCodeCreateInput {
  id: ID
  label: String
  scans: Int
  user: UserCreateOneWithoutQrcodesInput
}

input QRCodeCreateManyWithoutUserInput {
  create: [QRCodeCreateWithoutUserInput!]
  connect: [QRCodeWhereUniqueInput!]
}

input QRCodeCreateWithoutUserInput {
  id: ID
  label: String
  scans: Int
}

type QRCodeEdge {
  node: QRCode!
  cursor: String!
}

enum QRCodeOrderByInput {
  id_ASC
  id_DESC
  label_ASC
  label_DESC
  scans_ASC
  scans_DESC
}

type QRCodePreviousValues {
  id: ID!
  label: String
  scans: Int
}

input QRCodeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_lt: String
  label_lte: String
  label_gt: String
  label_gte: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  scans: Int
  scans_not: Int
  scans_in: [Int!]
  scans_not_in: [Int!]
  scans_lt: Int
  scans_lte: Int
  scans_gt: Int
  scans_gte: Int
  AND: [QRCodeScalarWhereInput!]
  OR: [QRCodeScalarWhereInput!]
  NOT: [QRCodeScalarWhereInput!]
}

type QRCodeSubscriptionPayload {
  mutation: MutationType!
  node: QRCode
  updatedFields: [String!]
  previousValues: QRCodePreviousValues
}

input QRCodeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QRCodeWhereInput
  AND: [QRCodeSubscriptionWhereInput!]
  OR: [QRCodeSubscriptionWhereInput!]
  NOT: [QRCodeSubscriptionWhereInput!]
}

input QRCodeUpdateInput {
  label: String
  scans: Int
  user: UserUpdateOneWithoutQrcodesInput
}

input QRCodeUpdateManyDataInput {
  label: String
  scans: Int
}

input QRCodeUpdateManyMutationInput {
  label: String
  scans: Int
}

input QRCodeUpdateManyWithoutUserInput {
  create: [QRCodeCreateWithoutUserInput!]
  delete: [QRCodeWhereUniqueInput!]
  connect: [QRCodeWhereUniqueInput!]
  set: [QRCodeWhereUniqueInput!]
  disconnect: [QRCodeWhereUniqueInput!]
  update: [QRCodeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [QRCodeUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [QRCodeScalarWhereInput!]
  updateMany: [QRCodeUpdateManyWithWhereNestedInput!]
}

input QRCodeUpdateManyWithWhereNestedInput {
  where: QRCodeScalarWhereInput!
  data: QRCodeUpdateManyDataInput!
}

input QRCodeUpdateWithoutUserDataInput {
  label: String
  scans: Int
}

input QRCodeUpdateWithWhereUniqueWithoutUserInput {
  where: QRCodeWhereUniqueInput!
  data: QRCodeUpdateWithoutUserDataInput!
}

input QRCodeUpsertWithWhereUniqueWithoutUserInput {
  where: QRCodeWhereUniqueInput!
  update: QRCodeUpdateWithoutUserDataInput!
  create: QRCodeCreateWithoutUserInput!
}

input QRCodeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_lt: String
  label_lte: String
  label_gt: String
  label_gte: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  scans: Int
  scans_not: Int
  scans_in: [Int!]
  scans_not_in: [Int!]
  scans_lt: Int
  scans_lte: Int
  scans_gt: Int
  scans_gte: Int
  user: UserWhereInput
  AND: [QRCodeWhereInput!]
  OR: [QRCodeWhereInput!]
  NOT: [QRCodeWhereInput!]
}

input QRCodeWhereUniqueInput {
  id: ID
}

type Query {
  connection(where: ConnectionWhereUniqueInput!): Connection
  connections(where: ConnectionWhereInput, orderBy: ConnectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Connection]!
  connectionsConnection(where: ConnectionWhereInput, orderBy: ConnectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConnectionConnection!
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!
  profileField(where: ProfileFieldWhereUniqueInput!): ProfileField
  profileFields(where: ProfileFieldWhereInput, orderBy: ProfileFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProfileField]!
  profileFieldsConnection(where: ProfileFieldWhereInput, orderBy: ProfileFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileFieldConnection!
  qRCode(where: QRCodeWhereUniqueInput!): QRCode
  qRCodes(where: QRCodeWhereInput, orderBy: QRCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QRCode]!
  qRCodesConnection(where: QRCodeWhereInput, orderBy: QRCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QRCodeConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  connection(where: ConnectionSubscriptionWhereInput): ConnectionSubscriptionPayload
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
  profileField(where: ProfileFieldSubscriptionWhereInput): ProfileFieldSubscriptionPayload
  qRCode(where: QRCodeSubscriptionWhereInput): QRCodeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile(where: ProfileFieldWhereInput, orderBy: ProfileFieldOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProfileField!]
  qrcodes(where: QRCodeWhereInput, orderBy: QRCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QRCode!]
  sentConnections(where: ConnectionWhereInput, orderBy: ConnectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Connection!]
  receivedConnections(where: ConnectionWhereInput, orderBy: ConnectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Connection!]
  blockedConnections(where: ConnectionWhereInput, orderBy: ConnectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Connection!]
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification!]
  username: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldCreateManyWithoutUserInput
  qrcodes: QRCodeCreateManyWithoutUserInput
  sentConnections: ConnectionCreateManyWithoutSenderInput
  receivedConnections: ConnectionCreateManyWithoutReceiverInput
  blockedConnections: ConnectionCreateManyWithoutBlockerInput
  notifications: NotificationCreateManyWithoutUserInput
  username: String
}

input UserCreateOneWithoutBlockedConnectionsInput {
  create: UserCreateWithoutBlockedConnectionsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutQrcodesInput {
  create: UserCreateWithoutQrcodesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReceivedConnectionsInput {
  create: UserCreateWithoutReceivedConnectionsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSentConnectionsInput {
  create: UserCreateWithoutSentConnectionsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBlockedConnectionsInput {
  id: ID
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldCreateManyWithoutUserInput
  qrcodes: QRCodeCreateManyWithoutUserInput
  sentConnections: ConnectionCreateManyWithoutSenderInput
  receivedConnections: ConnectionCreateManyWithoutReceiverInput
  notifications: NotificationCreateManyWithoutUserInput
  username: String
}

input UserCreateWithoutNotificationsInput {
  id: ID
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldCreateManyWithoutUserInput
  qrcodes: QRCodeCreateManyWithoutUserInput
  sentConnections: ConnectionCreateManyWithoutSenderInput
  receivedConnections: ConnectionCreateManyWithoutReceiverInput
  blockedConnections: ConnectionCreateManyWithoutBlockerInput
  username: String
}

input UserCreateWithoutProfileInput {
  id: ID
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  qrcodes: QRCodeCreateManyWithoutUserInput
  sentConnections: ConnectionCreateManyWithoutSenderInput
  receivedConnections: ConnectionCreateManyWithoutReceiverInput
  blockedConnections: ConnectionCreateManyWithoutBlockerInput
  notifications: NotificationCreateManyWithoutUserInput
  username: String
}

input UserCreateWithoutQrcodesInput {
  id: ID
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldCreateManyWithoutUserInput
  sentConnections: ConnectionCreateManyWithoutSenderInput
  receivedConnections: ConnectionCreateManyWithoutReceiverInput
  blockedConnections: ConnectionCreateManyWithoutBlockerInput
  notifications: NotificationCreateManyWithoutUserInput
  username: String
}

input UserCreateWithoutReceivedConnectionsInput {
  id: ID
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldCreateManyWithoutUserInput
  qrcodes: QRCodeCreateManyWithoutUserInput
  sentConnections: ConnectionCreateManyWithoutSenderInput
  blockedConnections: ConnectionCreateManyWithoutBlockerInput
  notifications: NotificationCreateManyWithoutUserInput
  username: String
}

input UserCreateWithoutSentConnectionsInput {
  id: ID
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldCreateManyWithoutUserInput
  qrcodes: QRCodeCreateManyWithoutUserInput
  receivedConnections: ConnectionCreateManyWithoutReceiverInput
  blockedConnections: ConnectionCreateManyWithoutBlockerInput
  notifications: NotificationCreateManyWithoutUserInput
  username: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  authId_ASC
  authId_DESC
  name_ASC
  name_DESC
  picture_ASC
  picture_DESC
  birthdate_ASC
  birthdate_DESC
  location_ASC
  location_DESC
  industry_ASC
  industry_DESC
  jobtitle_ASC
  jobtitle_DESC
  tagline_ASC
  tagline_DESC
  bio_ASC
  bio_DESC
  username_ASC
  username_DESC
}

type UserPreviousValues {
  id: ID!
  authId: String!
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  username: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  authId: String
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldUpdateManyWithoutUserInput
  qrcodes: QRCodeUpdateManyWithoutUserInput
  sentConnections: ConnectionUpdateManyWithoutSenderInput
  receivedConnections: ConnectionUpdateManyWithoutReceiverInput
  blockedConnections: ConnectionUpdateManyWithoutBlockerInput
  notifications: NotificationUpdateManyWithoutUserInput
  username: String
}

input UserUpdateManyMutationInput {
  authId: String
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  username: String
}

input UserUpdateOneRequiredWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput
  update: UserUpdateWithoutNotificationsDataInput
  upsert: UserUpsertWithoutNotificationsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  update: UserUpdateWithoutProfileDataInput
  upsert: UserUpsertWithoutProfileInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutBlockedConnectionsInput {
  create: UserCreateWithoutBlockedConnectionsInput
  update: UserUpdateWithoutBlockedConnectionsDataInput
  upsert: UserUpsertWithoutBlockedConnectionsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutQrcodesInput {
  create: UserCreateWithoutQrcodesInput
  update: UserUpdateWithoutQrcodesDataInput
  upsert: UserUpsertWithoutQrcodesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutReceivedConnectionsInput {
  create: UserCreateWithoutReceivedConnectionsInput
  update: UserUpdateWithoutReceivedConnectionsDataInput
  upsert: UserUpsertWithoutReceivedConnectionsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutSentConnectionsInput {
  create: UserCreateWithoutSentConnectionsInput
  update: UserUpdateWithoutSentConnectionsDataInput
  upsert: UserUpsertWithoutSentConnectionsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutBlockedConnectionsDataInput {
  authId: String
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldUpdateManyWithoutUserInput
  qrcodes: QRCodeUpdateManyWithoutUserInput
  sentConnections: ConnectionUpdateManyWithoutSenderInput
  receivedConnections: ConnectionUpdateManyWithoutReceiverInput
  notifications: NotificationUpdateManyWithoutUserInput
  username: String
}

input UserUpdateWithoutNotificationsDataInput {
  authId: String
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldUpdateManyWithoutUserInput
  qrcodes: QRCodeUpdateManyWithoutUserInput
  sentConnections: ConnectionUpdateManyWithoutSenderInput
  receivedConnections: ConnectionUpdateManyWithoutReceiverInput
  blockedConnections: ConnectionUpdateManyWithoutBlockerInput
  username: String
}

input UserUpdateWithoutProfileDataInput {
  authId: String
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  qrcodes: QRCodeUpdateManyWithoutUserInput
  sentConnections: ConnectionUpdateManyWithoutSenderInput
  receivedConnections: ConnectionUpdateManyWithoutReceiverInput
  blockedConnections: ConnectionUpdateManyWithoutBlockerInput
  notifications: NotificationUpdateManyWithoutUserInput
  username: String
}

input UserUpdateWithoutQrcodesDataInput {
  authId: String
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldUpdateManyWithoutUserInput
  sentConnections: ConnectionUpdateManyWithoutSenderInput
  receivedConnections: ConnectionUpdateManyWithoutReceiverInput
  blockedConnections: ConnectionUpdateManyWithoutBlockerInput
  notifications: NotificationUpdateManyWithoutUserInput
  username: String
}

input UserUpdateWithoutReceivedConnectionsDataInput {
  authId: String
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldUpdateManyWithoutUserInput
  qrcodes: QRCodeUpdateManyWithoutUserInput
  sentConnections: ConnectionUpdateManyWithoutSenderInput
  blockedConnections: ConnectionUpdateManyWithoutBlockerInput
  notifications: NotificationUpdateManyWithoutUserInput
  username: String
}

input UserUpdateWithoutSentConnectionsDataInput {
  authId: String
  name: String
  picture: String
  birthdate: String
  location: String
  industry: String
  jobtitle: String
  tagline: String
  bio: String
  profile: ProfileFieldUpdateManyWithoutUserInput
  qrcodes: QRCodeUpdateManyWithoutUserInput
  receivedConnections: ConnectionUpdateManyWithoutReceiverInput
  blockedConnections: ConnectionUpdateManyWithoutBlockerInput
  notifications: NotificationUpdateManyWithoutUserInput
  username: String
}

input UserUpsertWithoutBlockedConnectionsInput {
  update: UserUpdateWithoutBlockedConnectionsDataInput!
  create: UserCreateWithoutBlockedConnectionsInput!
}

input UserUpsertWithoutNotificationsInput {
  update: UserUpdateWithoutNotificationsDataInput!
  create: UserCreateWithoutNotificationsInput!
}

input UserUpsertWithoutProfileInput {
  update: UserUpdateWithoutProfileDataInput!
  create: UserCreateWithoutProfileInput!
}

input UserUpsertWithoutQrcodesInput {
  update: UserUpdateWithoutQrcodesDataInput!
  create: UserCreateWithoutQrcodesInput!
}

input UserUpsertWithoutReceivedConnectionsInput {
  update: UserUpdateWithoutReceivedConnectionsDataInput!
  create: UserCreateWithoutReceivedConnectionsInput!
}

input UserUpsertWithoutSentConnectionsInput {
  update: UserUpdateWithoutSentConnectionsDataInput!
  create: UserCreateWithoutSentConnectionsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  authId: String
  authId_not: String
  authId_in: [String!]
  authId_not_in: [String!]
  authId_lt: String
  authId_lte: String
  authId_gt: String
  authId_gte: String
  authId_contains: String
  authId_not_contains: String
  authId_starts_with: String
  authId_not_starts_with: String
  authId_ends_with: String
  authId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  birthdate: String
  birthdate_not: String
  birthdate_in: [String!]
  birthdate_not_in: [String!]
  birthdate_lt: String
  birthdate_lte: String
  birthdate_gt: String
  birthdate_gte: String
  birthdate_contains: String
  birthdate_not_contains: String
  birthdate_starts_with: String
  birthdate_not_starts_with: String
  birthdate_ends_with: String
  birthdate_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  industry: String
  industry_not: String
  industry_in: [String!]
  industry_not_in: [String!]
  industry_lt: String
  industry_lte: String
  industry_gt: String
  industry_gte: String
  industry_contains: String
  industry_not_contains: String
  industry_starts_with: String
  industry_not_starts_with: String
  industry_ends_with: String
  industry_not_ends_with: String
  jobtitle: String
  jobtitle_not: String
  jobtitle_in: [String!]
  jobtitle_not_in: [String!]
  jobtitle_lt: String
  jobtitle_lte: String
  jobtitle_gt: String
  jobtitle_gte: String
  jobtitle_contains: String
  jobtitle_not_contains: String
  jobtitle_starts_with: String
  jobtitle_not_starts_with: String
  jobtitle_ends_with: String
  jobtitle_not_ends_with: String
  tagline: String
  tagline_not: String
  tagline_in: [String!]
  tagline_not_in: [String!]
  tagline_lt: String
  tagline_lte: String
  tagline_gt: String
  tagline_gte: String
  tagline_contains: String
  tagline_not_contains: String
  tagline_starts_with: String
  tagline_not_starts_with: String
  tagline_ends_with: String
  tagline_not_ends_with: String
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  profile_every: ProfileFieldWhereInput
  profile_some: ProfileFieldWhereInput
  profile_none: ProfileFieldWhereInput
  qrcodes_every: QRCodeWhereInput
  qrcodes_some: QRCodeWhereInput
  qrcodes_none: QRCodeWhereInput
  sentConnections_every: ConnectionWhereInput
  sentConnections_some: ConnectionWhereInput
  sentConnections_none: ConnectionWhereInput
  receivedConnections_every: ConnectionWhereInput
  receivedConnections_some: ConnectionWhereInput
  receivedConnections_none: ConnectionWhereInput
  blockedConnections_every: ConnectionWhereInput
  blockedConnections_some: ConnectionWhereInput
  blockedConnections_none: ConnectionWhereInput
  notifications_every: NotificationWhereInput
  notifications_some: NotificationWhereInput
  notifications_none: NotificationWhereInput
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  authId: String
}
`
      }
    